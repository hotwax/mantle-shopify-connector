<?xml version="1.0" encoding="UTF-8"?>
<entity-facade-xml type="seed">
    <moqui.resource.DbResource filename="OrderHeaderByIdQuery.ftl" isFile="Y" resourceId="OrderHeaderByIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query{
                    node(id: "${shopifyOrderId}") {
                        id
                        ... on
                        Order {
                            id
                            name
                            createdAt
                            updatedAt
                            cancelledAt
                            displayFulfillmentStatus
                            returnStatus
                            taxesIncluded
                            phone
                            email
                            tags
                            note
                            statusPageUrl
                            currencyCode
                            presentmentCurrencyCode
                            customer {
                                id
                                firstName
                                lastName
                            }
                            channelInformation {
                                channelId
                                channelDefinition {
                                    handle
                                }
                            }
                            customAttributes {
                                key
                                value
                            }
                            shippingAddress {
                                name
                                address1
                                address2
                                city
                                zip
                                provinceCode
                                countryCodeV2
                                latitude
                                longitude
                                phone
                            }
                            billingAddress {
                                firstName
                                lastName
                                address1
                                address2
                                city
                                zip
                                provinceCode
                                countryCodeV2
                                latitude
                                longitude
                                phone
                            }
                            totalPriceSet {
                                presentmentMoney {
                                    amount
                                    currencyCode
                                }
                            }
                            originalTotalPriceSet {
                                presentmentMoney {
                                    amount
                                    currencyCode
                                }
                            }
                            currentTotalPriceSet {
                                presentmentMoney {
                                    amount
                                    currencyCode
                                }
                            }
                            totalTipReceivedSet {
                                presentmentMoney {
                                    amount
                                    currencyCode
                                }
                            }
                            transactions {
                                id
                                parentTransaction {
                                    id
                                }
                                kind
                                status
                                processedAt
                                amountSet {
                                    presentmentMoney {
                                        amount
                                        currencyCode
                                    }
                                    shopMoney {
                                        amount
                                        currencyCode
                                    }
                                }
                                gateway
                                paymentDetails {
                                    ... on CardPaymentDetails {
                                        company
                                    }
                                }
                                receiptJson
                            }
                        }
                    }
                }
                </@compress>]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="OrderLineItemByIdQuery.ftl" isFile="Y" resourceId="OrderLineItemByIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query {
                    node(id: "${shopifyOrderId}") {
                        id
                        ... on
                        Order {
                            id
                            name
                            lineItems (first: 10<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                edges {
                                    node {
                                        id
                                        variant {
                                            id
                                            barcode
                                            sku
                                        }
                                        quantity
                                        currentQuantity
                                        fulfillableQuantity
                                        fulfillmentStatus
                                    }
                                }
                                pageInfo {
                                    endCursor
                                    hasNextPage
                                }
                            }
                        }
                    }
                }
                </@compress>]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="ReturnHeaderByIdQuery.ftl" isFile="Y" resourceId="ReturnHeaderByIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query{
                    node(id: "${returnId}") {
                        id
                        ... on
                        Return {
                            id
                            status
                            name
                        }
                    }
                }
                </@compress>]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="ReturnLineItemByIdQuery.ftl" isFile="Y" resourceId="ReturnLineItemByIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query{
                    node(id: "${returnId}") {
                        id
                        ... on
                        Return{
                            id
                            returnLineItems (first: 10<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                edges {
                                    node {
                                        ... on ReturnLineItem {
                                            id
                                            returnReason
                                            returnReasonNote
                                            fulfillmentLineItem {
                                                lineItem {
                                                    id
                                                    sku
                                                    quantity
                                                }
                                            }
                                            quantity
                                            withCodeDiscountedTotalPriceSet {
                                                presentmentMoney {
                                                    amount
                                                    currencyCode
                                                }
                                            }
                                        }
                                    }
                                }
                                pageInfo{
                                    endCursor
                                    hasNextPage
                                }
                            }
                        }
                    }
                }
                </@compress>]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="ExchangeLineItemByIdQuery.ftl" isFile="Y" resourceId="ExchangeLineItemByIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query{
                    node(id: "${returnId}"){
                        id
                        ... on
                        Return{
                            id
                            exchangeLineItems (first: 10<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                edges{
                                    node{
                                        id
                                        lineItem {
                                            id
                                            quantity
                                            sku
                                            variantTitle
                                            product {
                                                id
                                                title
                                            }
                                            originalUnitPriceSet {
                                                presentmentMoney {
                                                    amount
                                                    currencyCode
                                                }
                                            }
                                            originalTotalSet {
                                                presentmentMoney {
                                                    amount
                                                    currencyCode
                                                }
                                            }
                                            discountedUnitPriceSet {
                                                presentmentMoney {
                                                    amount
                                                    currencyCode
                                                }
                                            }
                                            discountedUnitPriceAfterAllDiscountsSet {
                                                presentmentMoney {
                                                    amount
                                                    currencyCode
                                                }
                                            }
                                            discountAllocations {
                                                allocatedAmountSet {
                                                    presentmentMoney {
                                                        amount
                                                        currencyCode
                                                    }
                                                }
                                            }
                                            taxLines {
                                                priceSet {
                                                    presentmentMoney {
                                                        amount
                                                        currencyCode
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                pageInfo{
                                    endCursor
                                    hasNextPage
                                }
                            }
                        }
                    }
                }
                </@compress>]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="ReturnsByOrderIDQuery.ftl" isFile="Y" resourceId="ReturnsByOrderIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query{
                    node(id: "${shopifyOrderId}") {
                        id
                        ... on
                        Order {
                            id
                            name
                            returns (first: 10<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                edges {
                                    node {
                                        id
                                    }
                                }
                                pageInfo{
                                    endCursor
                                    hasNextPage
                                }
                            }
                        }
                    }
                }
                </@compress>]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="FulfillmentOrdersByOrderIdQuery.ftl" isFile="Y" resourceId="FulfillmentOrdersByOrderIdQuery"
                               parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query{
                    node(id: "${shopifyOrderId}") {
                        id
                        ... on
                        Order {
                            id
                            name
                            fulfillmentOrders (first: 10<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                edges {
                                    node {
                                        id
                                    }
                                }
                                pageInfo{
                                    endCursor
                                    hasNextPage
                                }
                            }
                        }
                    }
                }
                </@compress>]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="FulfillmentOrderHeaderByIdQuery.ftl" isFile="Y" resourceId="FulfillmentOrderHeaderByIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query{
                    node(id: "${fulfillmentOrderId}") {
                        id
                        ... on
                        FulfillmentOrder {
                            id
                            status
                            updatedAt
                            fulfillAt
                            channelId
                            assignedLocation {
                                location {
                                    id
                                }
                            }
                            deliveryMethod {
                                methodType
                                serviceCode
                            }
                        }
                    }
                }
                </@compress>]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="FulfillmentOrderLineItemsByIdQuery.ftl" isFile="Y" resourceId="FulfillmentOrderLineItemsByIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query{
                    node(id: "${fulfillmentOrderId}") {
                        id
                        ... on
                        FulfillmentOrder {
                            id
                            lineItems (first : 10<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                edges{
                                    node {
                                        id
                                        lineItem {
                                            id
                                            sku
                                            variant {
                                                id
                                                barcode
                                                title
                                            }
                                            originalUnitPriceSet {
                                                presentmentMoney {
                                                    amount
                                                }
                                            }
                                            quantity
                                            nonFulfillableQuantity
                                            customAttributes {
                                                key
                                                value
                                            }
                                            taxLines {
                                                title
                                                ratePercentage
                                                priceSet {
                                                    presentmentMoney {
                                                        amount
                                                        currencyCode
                                                    }
                                                }
                                            }
                                            discountAllocations {
                                                allocatedAmountSet {
                                                    presentmentMoney {
                                                        amount
                                                        currencyCode
                                                    }
                                                }
                                                discountApplication {
                                                    ... on DiscountCodeApplication {
                                                        code
                                                        value {
                                                            ... on PricingPercentageValue {
                                                                percentage
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                pageInfo{
                                    endCursor
                                    hasNextPage
                                }
                            }
                        }
                    }
                }
                </@compress>]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="ReturnedOrderIdsQuery.ftl" isFile="Y" resourceId="ReturnedOrderIdsQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[
                    <#ftl output_format="HTML">
                    <@compress single_line=true>
                        <#if queryParams.fromDate?has_content && !queryParams.thruDate?has_content>
                            <#assign filterQuery = "updated_at:>'${queryParams.fromDate}' AND return_status:'RETURNED'"/>
                        </#if>
                        <#if queryParams.thruDate?has_content && !queryParams.fromDate?has_content>
                            <#assign filterQuery = "updated_at:<'${queryParams.thruDate}' AND return_status:'RETURNED'"/>
                        </#if>
                        <#if queryParams.fromDate?has_content && queryParams.thruDate?has_content>
                            <#assign filterQuery = "updated_at:>'${queryParams.fromDate}' AND updated_at:<'${queryParams.thruDate}' AND return_status:'RETURNED'"/>
                        </#if>
                        <#if !filterQuery?has_content>
                            <#assign filterQuery = "return_status:'RETURNED'"/>
                        </#if>
                        query {
                            orders (first: 100<#if cursor?has_content>, after: "${cursor}"</#if><#if filterQuery?has_content>, query: "${filterQuery}")</#if> {
                                edges {
                                    node {
                                        id
                                        name
                                        returnStatus
                                    }
                                }
                                pageInfo {
                                    endCursor
                                    hasNextPage
                                }
                            }
                        }
                    </@compress>
                ]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="RefundIdsByReturnIdQuery.ftl" isFile="Y" resourceId="RefundIdsByReturnIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[
                    <#ftl output_format="HTML">
                    <@compress single_line=true>
                        query{
                            node(id: "${returnId}") {
                                id
                                ... on
                                Return {
                                    refunds (first: 10<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                        edges {
                                            node {
                                                id
                                            }
                                        }
                                        pageInfo {
                                            endCursor
                                            hasNextPage
                                        }
                                    }
                                }
                            }
                        }
                    </@compress>
                ]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="RefundLineItemsByIdQuery.ftl" isFile="Y" resourceId="RefundLineItemsByIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[
                    <#ftl output_format="HTML">
                    <@compress single_line=true>
                        query {
                            node(id: "${shopifyRefundId}") {
                                id
                                ... on
                                Refund {
                                    id
                                    refundLineItems (first : 10<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                        edges {
                                            node {
                                                lineItem {
                                                    id
                                                }
                                                location {
                                                    id
                                                }
                                                restockType
                                                quantity
                                            }
                                        }
                                        pageInfo {
                                            hasNextPage
                                            endCursor
                                        }
                                    }
                                }
                            }
                        }
                    </@compress>
                ]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="RefundTransactionsByIdQuery.ftl" isFile="Y" resourceId="RefundTransactionsByIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[
                    <#ftl output_format="HTML">
                    <@compress single_line=true>
                        query {
                            node(id: "${shopifyRefundId}") {
                                id
                                ... on
                                Refund {
                                    id
                                    transactions (first : 10<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                        edges {
                                            node {
                                                id
                                                parentTransaction {
                                                    id
                                                }
                                                status
                                                amountSet {
                                                    presentmentMoney {
                                                        amount
                                                        currencyCode
                                                    }
                                                }
                                                kind
                                                gateway
                                                paymentDetails {
                                                    ... on CardPaymentDetails {
                                                        company
                                                    }
                                                }
                                            }
                                        }
                                        pageInfo {
                                            endCursor
                                            hasNextPage
                                        }
                                    }
                                }
                            }
                        }
                    </@compress>
                ]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="ReverseFulfillmentOrdersByIdQuery.ftl" isFile="Y" resourceId="ReverseFulfillmentOrdersByIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query{
                    node(id: "${returnId}") {
                        id
                        ... on
                        Return {
                            id
                            reverseFulfillmentOrders (first: 10<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                edges {
                                    node {
                                        id
                                        status
                                    }
                                }
                                pageInfo {
                                    endCursor
                                    hasNextPage
                                }
                            }
                        }
                    }
                }
                </@compress>]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="ReverseFulfillmentOrderLineItemsByIdQuery.ftl" isFile="Y" resourceId="ReverseLineItemsByIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query{
                    node(id: "${reverseFulfillmentOrderId}") {
                        id
                        ... on
                        ReverseFulfillmentOrder {
                            id
                            lineItems (first: 10<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                edges {
                                    node {
                                        fulfillmentLineItem {
                                            lineItem {
                                                id
                                            }
                                        }
                                        dispositions {
                                            location {
                                                id
                                            }
                                            type
                                            quantity
                                        }
                                    }
                                }
                                pageInfo {
                                    endCursor
                                    hasNextPage
                                }
                            }
                        }
                    }
                }
                </@compress>]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>

    <!-- SystemMessageType record for generating Returned Order Ids Feed -->
    <moqui.service.message.SystemMessageType systemMessageTypeId="GenerateReturnedOrderIdsFeed"
            description="Generate Returned Order Ids Feed"
            sendPath="dbresource://shopify/template/graphQL/ReturnedOrderIdsQuery.ftl"
            sendServiceName="co.hotwax.shopify.system.ShopifySystemMessageServices.generate#ReturnedOrderIdsFeed"
            receivePath="${contentRoot}/shopify/ReturnedOrderIdsFeed/ReturnedOrderIdsFeed-${dateTime}-${systemMessageId}.json"/>

    <!-- SystemMessageType record for generating Returns and Exchange Feed -->
    <moqui.service.message.SystemMessageType systemMessageTypeId="GenerateReturnsAndExchangeFeed"
            description="Generate Returns and Exchange Feed"
            parentTypeId="LocalFeedFile"
            sendPath="${contentRoot}/shopify/ReturnsAndExchangeFeed/ReturnsAndExchangeFeed-${dateTime}-${systemMessageId}.json"
            consumeServiceName="co.hotwax.shopify.system.ShopifySystemMessageServices.generate#ReturnsAndExchangeFeed"/>

    <moqui.service.message.SystemMessageType systemMessageTypeId="SendReturnsAndExchangeFeed"
            description="Send Returns and Exchange Feed"
            parentTypeId="LocalFeedFile"
            sendServiceName="co.hotwax.ofbiz.SystemMessageServices.send#SystemMessageFileSftp"
            sendPath=""/>

    <!-- Enumeration to create relation between GenerateReturnedOrderIdsFeed, GenerateReturnsAndExchangeFeed and SendReturnsAndExchangeFeed SystemMessageType(s) -->
    <moqui.basic.Enumeration description="Send Returns And Exchange Feed" enumId="SendReturnsAndExchangeFeed" enumTypeId="ShopifyMessageTypeEnum"/>
    <moqui.basic.Enumeration description="Generate Returns And Exchange Feed" enumId="GenerateReturnsAndExchangeFeed" enumTypeId="ShopifyMessageTypeEnum" relatedEnumId="SendReturnsAndExchangeFeed" relatedEnumTypeId="ShopifyMessageTypeEnum"/>
    <moqui.basic.Enumeration description="Generate Returned Order Ids Feed" enumId="GenerateReturnedOrderIdsFeed" enumTypeId="ShopifyMessageTypeEnum" relatedEnumId="GenerateReturnsAndExchangeFeed" relatedEnumTypeId="ShopifyMessageTypeEnum"/>

    <!-- ServiceJob data for queuing returned orderIds feed -->
    <moqui.service.job.ServiceJob jobName="queue_ReturnedOrderIdsFeed" description="Queue returned orderIds feed"
            serviceName="co.hotwax.shopify.system.ShopifySystemMessageServices.queue#ReturnedOrderIdsFeed" cronExpression="0 0 * * * ?" paused="Y">
        <parameters parameterName="systemMessageTypeId" parameterValue="GenerateReturnedOrderIdsFeed"/>
        <parameters parameterName="systemMessageRemoteId" parameterValue=""/>
        <parameters parameterName="fromDate" parameterValue=""/>
        <parameters parameterName="thruDate" parameterValue=""/>
    </moqui.service.job.ServiceJob>

    <!-- SystemMessageType record for generating Updated Order Ids Feed -->
    <moqui.service.message.SystemMessageType systemMessageTypeId="GenerateUpdatedOrderIdsFeed"
            description="Generate Updated Order Ids Feed"
            sendPath="dbresource://shopify/template/graphQL/UpdatedOrderIdsQuery.ftl"
            sendServiceName="co.hotwax.shopify.system.ShopifySystemMessageServices.generate#UpdatedOrderIdsFeed"
            receivePath="${contentRoot}/shopify/UpdatedOrderIdsFeed/UpdatedOrderIdsFeed-${dateTime}-${systemMessageId}.json"/>

    <!-- SystemMessageType record for generating Order Updates Feed -->
    <moqui.service.message.SystemMessageType systemMessageTypeId="GenerateOrderUpdatesFeed"
            description="Generate Order Updates Feed"
            parentTypeId="LocalFeedFile"
            sendPath="${contentRoot}/shopify/OrderUpdatesFeed/OrderUpdatesFeed-${dateTime}-${systemMessageId}.json"
            consumeServiceName="co.hotwax.shopify.system.ShopifySystemMessageServices.generate#OrderUpdatesFeed"/>

    <moqui.service.message.SystemMessageType systemMessageTypeId="SendOrderUpdatesFeed"
            description="Send Order Updates Feed"
            parentTypeId="LocalFeedFile"
            sendServiceName="co.hotwax.ofbiz.SystemMessageServices.send#SystemMessageFileSftp"
            sendPath=""/>

    <!-- Enumeration to create relation between GenerateUpdatedOrderIdsFeed, GenerateUpdatedOrderIdsFeed and SendOrderUpdatesFeed SystemMessageType(s) -->
    <moqui.basic.Enumeration description="Send Order Updates Feed" enumId="SendOrderUpdatesFeed" enumTypeId="ShopifyMessageTypeEnum"/>
    <moqui.basic.Enumeration description="Generate Order Updates Feed" enumId="GenerateOrderUpdatesFeed" enumTypeId="ShopifyMessageTypeEnum" relatedEnumId="SendOrderUpdatesFeed" relatedEnumTypeId="ShopifyMessageTypeEnum"/>
    <moqui.basic.Enumeration description="Generate Updated Order Ids Feed" enumId="GenerateUpdatedOrderIdsFeed" enumTypeId="ShopifyMessageTypeEnum" relatedEnumId="GenerateOrderUpdatesFeed" relatedEnumTypeId="ShopifyMessageTypeEnum"/>

    <!-- ServiceJob data for queuing Updated orderIds feed -->
    <moqui.service.job.ServiceJob jobName="queue_UpdatedOrderIdsFeed" description="Queue orderIds by tag feed"
            serviceName="co.hotwax.shopify.system.ShopifySystemMessageServices.queue#FeedSystemMessage" cronExpression="0 0 * * * ?" paused="Y">
        <parameters parameterName="systemMessageTypeId" parameterValue="GenerateUpdatedOrderIdsFeed"/>
        <parameters parameterName="systemMessageRemoteId" parameterValue=""/>
        <parameters parameterName="runAsBatch" parameterValue="true"/>
    </moqui.service.job.ServiceJob>

    <!-- SystemMessageType record for bulk fulfillment order query to Shopify -->
    <moqui.service.message.SystemMessageType systemMessageTypeId="BulkFulfillmentOrderQuery"
            description="Bulk Fulfillment Order Query System Message"
            parentTypeId="ShopifyBulkQuery"
            sendServiceName="co.hotwax.shopify.system.ShopifySystemMessageServices.send#BulkQuerySystemMessage"
            sendPath="dbresource://shopify/template/graphQL/BulkFulfillmentOrderQuery.ftl"
            consumeServiceName="co.hotwax.shopify.system.ShopifySystemMessageServices.consume#BulkOperationResult"
            receivePath="${contentRoot}/shopify/BulkFulfillmentOrderQuery/BulkOperationResult-${systemMessageId}-${remoteMessageId}-${nowDate}.jsonl"/>

    <!-- SystemMessageType record for processing bulk fulfillment order query result -->
    <moqui.service.message.SystemMessageType systemMessageTypeId="SendBulkFulfillmentOrderQueryResult"
            description="Send Bulk Fulfillment Order Query Result"
            parentTypeId="LocalFeedFile"
            sendServiceName="co.hotwax.ofbiz.SystemMessageServices.send#SystemMessageFileSftp"
            sendPath=""/>

    <!-- Enumeration to create relation between BulkFulfillmentOrderQuery and SendBulkFulfillmentOrderQueryResult SystemMessageType(s) -->
    <moqui.basic.Enumeration description="Send Bulk Fulfillment Order Query Result" enumId="SendBulkFulfillmentOrderQueryResult" enumTypeId="ShopifyMessageTypeEnum"/>
    <moqui.basic.Enumeration description="Bulk Fulfillment Order Query" enumId="BulkFulfillmentOrderQuery" enumTypeId="ShopifyMessageTypeEnum" relatedEnumId="SendBulkFulfillmentOrderQueryResult" relatedEnumTypeId="ShopifyMessageTypeEnum"/>

    <!-- ServiceJob data for queuing bulk fulfillment order query -->
    <moqui.service.job.ServiceJob jobName="queue_BulkQuerySystemMessage_BulkFulfillmentOrderQuery" description="Queue bulk fulfillment order query"
            serviceName="co.hotwax.shopify.system.ShopifySystemMessageServices.queue#BulkQuerySystemMessage" cronExpression="0 0/15 * * * ?" paused="Y">
        <parameters parameterName="systemMessageTypeId" parameterValue="BulkFulfillmentOrderQuery"/>
        <parameters parameterName="systemMessageRemoteId" parameterValue=""/>
        <parameters parameterName="filterQuery" parameterValue=""/>
        <parameters parameterName="fromDate" parameterValue=""/>
        <parameters parameterName="thruDate" parameterValue=""/>
        <parameters parameterName="fromDateLabel" parameterValue=""/>
        <parameters parameterName="thruDateLabel" parameterValue=""/>
    </moqui.service.job.ServiceJob>

    <!-- DbResource template data for GraphQl query to Shopify -->
    <moqui.resource.DbResource filename="BulkFulfillmentOrderQuery.ftl" isFile="Y" resourceId="BulkFulfillmentOrderQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
            <@compress single_line=true>
                <#if queryParams?has_content>
                    <#if queryParams.filterQuery?has_content>
                        <#assign filterQuery = queryParams.filterQuery/>
                    <#else>
                        <#if queryParams.fromDateLabel?has_content>
                            <#assign fromDateLabel = queryParams.fromDateLabel/>
                        <#else>
                            <#assign fromDateLabel = "created_at"/>
                        </#if>
                        <#if queryParams.thruDateLabel?has_content>
                            <#assign thruDateLabel = queryParams.thruDateLabel/>
                        <#else>
                            <#assign thruDateLabel = "created_at"/>
                        </#if>
                        <#if queryParams.fromDate?has_content && !queryParams.thruDate?has_content>
                            <#assign filterQuery = "${fromDateLabel}:>'${queryParams.fromDate}'"/>
                        </#if>
                        <#if queryParams.thruDate?has_content && !queryParams.fromDate?has_content>
                            <#assign filterQuery = "${thruDateLabel}:<'${queryParams.thruDate}'"/>
                        </#if>
                        <#if queryParams.fromDate?has_content && queryParams.thruDate?has_content>
                            <#assign filterQuery = "${fromDateLabel}:>'${queryParams.fromDate}' AND ${thruDateLabel}:<'${queryParams.thruDate}'"/>
                        </#if>
                    </#if>
                </#if>
                mutation {
                    bulkOperationRunQuery(
                        query: """ {
                            orders <#if filterQuery?has_content>(query:"${filterQuery}")</#if> {
                                edges {
                                    node {
                                        id
                                        fulfillmentOrders {
                                            edges{
                                                node{
                                                    id
                                                    status
                                                    assignedLocation{
                                                        location{
                                                            id
                                                        }
                                                    }
                                                    lineItems {
                                                        edges{
                                                            node{
                                                                id
                                                                totalQuantity
                                                                lineItem{
                                                                    id
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    """ ) {
                        bulkOperation {
                            id
                            status
                        }
                        userErrors {
                            field
                            message
                        }
                    }
                }
            </@compress>]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>

    <!-- ServiceJob data for queuing bulk product metafields by tags query -->
    <moqui.service.job.ServiceJob jobName="queue_BulkQuerySystemMessage_BulkProductMetaFieldByTagsQuery" description="Queue bulk products query"
            serviceName="co.hotwax.shopify.system.ShopifySystemMessageServices.queue#BulkQuerySystemMessage" cronExpression="0 0 * * * ?" paused="Y">
        <parameters parameterName="systemMessageTypeId" parameterValue="BulkProductMetaFieldByTagsQuery"/>
        <parameters parameterName="systemMessageRemoteId" parameterValue=""/>
        <parameters parameterName="filterQuery" parameterValue=""/>
        <parameters parameterName="fromDate" parameterValue=""/>
        <parameters parameterName="thruDate" parameterValue=""/>
        <parameters parameterName="fromDateLabel" parameterValue=""/>
        <parameters parameterName="thruDateLabel" parameterValue=""/>
    </moqui.service.job.ServiceJob>

    <!-- SystemMessageType record for bulk product metafield by tags query to Shopify -->
    <moqui.service.message.SystemMessageType systemMessageTypeId="BulkProductMetaFieldByTagsQuery"
            description="Bulk Product Metafields By Tags Query System Message"
            parentTypeId="ShopifyBulkQuery"
            sendServiceName="co.hotwax.shopify.system.ShopifySystemMessageServices.send#BulkQuerySystemMessage"
            sendPath="dbresource://shopify/template/graphQL/BulkProductMetaFieldByTagsQuery.ftl"
            consumeServiceName="co.hotwax.shopify.system.ShopifySystemMessageServices.consume#BulkOperationResult"
            receivePath="${contentRoot}/shopify/BulkProductMetaFieldByTagsQuery/BulkOperationResult-${systemMessageId}-${remoteMessageId}-${nowDate}.jsonl"/>

    <moqui.service.message.SystemMessageType systemMessageTypeId="SendBulkProductMetaFieldsQueryResult"
            description="Send Bulk Product Metafields by Tags Query Result"
            parentTypeId="LocalFeedFile"
            sendServiceName="co.hotwax.ofbiz.SystemMessageServices.send#SystemMessageFileSftp"
            sendPath=""/>

    <!-- Enumeration to create relation between BulkProductMetaFieldByTagsQuery and SendBulkProductMetaFieldsQueryResult SystemMessageType(s) -->
    <moqui.basic.Enumeration description="Send Bulk Product Metafields by Tags Query Result" enumId="SendBulkProductMetaFieldsQueryResult" enumTypeId="ShopifyMessageTypeEnum"/>
    <moqui.basic.Enumeration description="Bulk Product Metafields Query" enumId="BulkProductMetaFieldByTagsQuery" enumTypeId="ShopifyMessageTypeEnum" relatedEnumId="SendBulkProductMetaFieldsQueryResult" relatedEnumTypeId="ShopifyMessageTypeEnum"/>

    <moqui.resource.DbResource filename="BulkProductMetaFieldByTagsQuery.ftl" isFile="Y" resourceId="BulkProductMetaFieldByTagsQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                    <#if queryParams?has_content>
                        <#if queryParams.namespace?has_content>
                            <#assign namespace = queryParams.namespace/>
                        </#if>
                        <#if queryParams.filterQuery?has_content>
                            <#assign filterQuery = queryParams.filterQuery/>
                        <#else>
                            <#if queryParams.filterCondition?has_content>
                                <#assign filterCondition = queryParams.filterCondition/>
                            </#if>
                            <#if queryParams.fromDateLabel?has_content>
                                <#assign fromDateLabel = queryParams.fromDateLabel/>
                            <#else>
                                <#assign fromDateLabel = "updated_at"/>
                            </#if>
                            <#if queryParams.thruDateLabel?has_content>
                                <#assign thruDateLabel = queryParams.thruDateLabel/>
                            <#else>
                                <#assign thruDateLabel = "updated_at"/>
                            </#if>
                            <#if queryParams.fromDate?has_content && !queryParams.thruDate?has_content>
                                <#assign filterQuery = "${filterCondition} AND ${fromDateLabel}:>'${queryParams.fromDate}'"/>
                            </#if>
                            <#if queryParams.thruDate?has_content && !queryParams.fromDate?has_content>
                                <#assign filterQuery = "${filterCondition} AND ${thruDateLabel}:<'${queryParams.thruDate}'"/>
                            </#if>
                            <#if queryParams.fromDate?has_content && queryParams.thruDate?has_content>
                                <#assign filterQuery = "${filterCondition} AND ${fromDateLabel}:>'${queryParams.fromDate}' AND ${thruDateLabel}:<'${queryParams.thruDate}'"/>
                            </#if>
                        </#if>
                    </#if>
                    mutation {
                        bulkOperationRunQuery(
                            query: """ {
                                products <#if filterQuery?has_content>(query:"${filterQuery}")</#if> {
                                    edges {
                                        node {
                                            id
                                            variants{
                                                edges{
                                                    node{
                                                        id
                                                    }
                                                }
                                            }
                                            metafields <#if namespace?has_content>(namespace:"${namespace}")</#if> {
                                                edges{
                                                    node{
                                                        id
                                                        key
                                                        value
                                                        createdAt
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        """ ) {
                            bulkOperation {
                                id
                                status
                            }
                            userErrors {
                                field
                                message
                            }
                        }
                    }
                </@compress>]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>

    <!-- Enumeration Types for Service Jobs -->
    <moqui.basic.EnumerationType enumTypeId="FULFILLMENT_SYS_JOB" description="Fulfillment Jobs"/>
    <moqui.basic.EnumerationType enumTypeId="MISC_SYS_JOB" description="Miscellaneous Jobs"/>

    <!-- Enumeration for Service Jobs -->
    <moqui.basic.Enumeration enumId="SND_SHPFY_FUL_ACK_FD" enumCode="SND_SHPFY_FUL_ACK_FD" description="Send Shopify Fulfillment Ack Feed" enumTypeId="FULFILLMENT_SYS_JOB"/>
    <moqui.basic.Enumeration enumId="POL_OMS_FLFLMNT_FD" enumCode="POL_OMS_FLFLMNT_FD" description="Poll OMS Fulfilled Items Feed" enumTypeId="FULFILLMENT_SYS_JOB"/>
    <moqui.basic.Enumeration enumId="SND_BLK_SYS_M_SHPFY" enumCode="SND_BLK_SYS_M_SHPFY" description="Send next bulk query system message in queue" enumTypeId="MISC_SYS_JOB"/>
    <moqui.basic.Enumeration enumId="POL_BLK_RSLT_SHPFY" enumCode="POL_BLK_RSLT_SHPFY" description="Poll current bulk operation query result" enumTypeId="MISC_SYS_JOB"/>

    <!-- Updated Service Jobs with jobTypeEnumIds -->
    <moqui.service.job.ServiceJob jobName="sendShopifyFulfillmentAckFeed" jobTypeEnumId="SND_SHPFY_FUL_ACK_FD"/>
    <moqui.service.job.ServiceJob jobName="poll_SystemMessageFileSftp_OMSFulfillmentFeed" jobTypeEnumId="POL_OMS_FLFLMNT_FD"/>
    <moqui.service.job.ServiceJob jobName="send_ProducedBulkOperationSystemMessage_ShopifyBulkQuery" jobTypeEnumId="SND_BLK_SYS_M_SHPFY"/>
    <moqui.service.job.ServiceJob jobName="poll_BulkOperationResult_ShopifyBulkQuery" jobTypeEnumId="POL_BLK_RSLT_SHPFY"/>
    <moqui.resource.DbResource filename="ExchangesByOrderIdQuery.ftl" isFile="Y" resourceId="ExchangesByOrderIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                    <@compress single_line=true>
                        query {
                            node(id: "${shopifyOrderId}") {
                                id
                                ... on
                                Order {
                                   id
                                    name
                                    exchangeV2s (first: 10<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                        edges {
                                            node {
                                                id
                                                completedAt
                                                location {
                                                    id
                                                }
                                                additions {
                                                    lineItems {
                                                        lineItem {
                                                            id
                                                            quantity
                                                            sku
                                                            variantTitle
                                                            isGiftCard
                                                            product {
                                                                id
                                                                title
                                                            }
                                                            originalUnitPriceSet {
                                                                presentmentMoney {
                                                                    amount
                                                                    currencyCode
                                                                }
                                                            }
                                                            originalTotalSet {
                                                                presentmentMoney {
                                                                    amount
                                                                    currencyCode
                                                                }
                                                            }
                                                            discountedUnitPriceSet {
                                                                presentmentMoney {
                                                                    amount
                                                                    currencyCode
                                                                }
                                                            }
                                                            discountedUnitPriceAfterAllDiscountsSet {
                                                                presentmentMoney {
                                                                    currencyCode
                                                                    amount
                                                                }
                                                            }
                                                            discountedTotalSet {
                                                                presentmentMoney {
                                                                    amount
                                                                    currencyCode
                                                                }
                                                            }
                                                            discountAllocations {
                                                                allocatedAmountSet {
                                                                    presentmentMoney {
                                                                        amount
                                                                        currencyCode
                                                                    }
                                                                }
                                                            }
                                                            taxLines {
                                                                priceSet {
                                                                    presentmentMoney {
                                                                        amount
                                                                        currencyCode
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                refunds {
                                                    id
                                                    return {
                                                        id
                                                    }
                                                }
                                                totalAmountProcessedSet {
                                                    presentmentMoney {
                                                        amount
                                                        currencyCode
                                                    }
                                                }
                                                transactions {
                                                    id
                                                    parentTransaction {
                                                        id
                                                    }
                                                    kind
                                                    status
                                                    processedAt
                                                    amountSet {
                                                        presentmentMoney {
                                                            amount
                                                            currencyCode
                                                        }
                                                    }
                                                    gateway
                                                    paymentDetails {
                                                        ... on CardPaymentDetails {
                                                            company
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        pageInfo{
                                            endCursor
                                            hasNextPage
                                        }
                                    }
                                }
                            }
                        }
                    </@compress>
                ]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="NewProductIdsQuery.ftl" isFile="Y" resourceId="NewProductIdsQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[
                    <#ftl output_format="HTML">
                    <@compress single_line=true>
                        <#if queryParams.fromDate?has_content && !queryParams.thruDate?has_content>
                            <#assign filterQuery = "created_at:>'${queryParams.fromDate}'"/>
                        </#if>
                        <#if queryParams.thruDate?has_content && !queryParams.fromDate?has_content>
                            <#assign filterQuery = "created_at:<'${queryParams.thruDate}'"/>
                        </#if>
                        <#if queryParams.fromDate?has_content && queryParams.thruDate?has_content>
                            <#assign filterQuery = "created_at:>'${queryParams.fromDate}' AND created_at:<'${queryParams.thruDate}'"/>
                        </#if>
                        query {
                            products (first: 100<#if cursor?has_content>, after: "${cursor}"</#if><#if filterQuery?has_content>, query: "${filterQuery}")</#if> {
                                edges {
                                    node {
                                        id
                                    }
                                }
                                pageInfo {
                                    endCursor
                                    hasNextPage
                                }
                            }
                        }
                    </@compress>
                ]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="ProductByIdQuery.ftl" isFile="Y" resourceId="ProductByIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                    query {
                        node(id: "${shopifyProductId}") {
                            id
                            ... on
                            Product {
                                id
                                handle
                                title
                                productType
                                featuredMedia {
                                    mediaContentType
                                    preview {
                                        image {
                                            url
                                        }
                                    }
                                }
                                options {
                                    id
                                    name
                                    position
                                    optionValues {
                                        id
                                        name
                                    }
                                }
                                tags
                            }
                        }
                    }
                </@compress>]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="ProductVariantsByProductIdQuery.ftl" isFile="Y" resourceId="ProductVariantsByProductIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                    query {
                        node (id: "${shopifyProductId}") {
                            id
                            ... on
                            Product {
                                id
                                variants (first: 10<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                    edges {
                                        node {
                                            id
                                            title
                                            sku
                                            barcode
                                            product {
                                                id
                                                handle
                                                title
                                            }
                                            price
                                            compareAtPrice
                                            position
                                            image {
                                                url
                                            }
                                            selectedOptions {
                                                name
                                                value
                                            }
                                            inventoryItem {
                                                id
                                                measurement {
                                                    weight {
                                                        unit
                                                        value
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    pageInfo {
                                        hasNextPage
                                        endCursor
                                    }
                                }
                            }
                        }
                    }
                </@compress>]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>

    <!-- SystemMessageType record for generating Created Product Ids Feed -->
    <moqui.service.message.SystemMessageType systemMessageTypeId="GenerateCreatedProductIdsFeed"
            description="Generate Created Product Ids Feed"
            sendPath="dbresource://shopify/template/graphQL/NewProductIdsQuery.ftl"
            sendServiceName="co.hotwax.shopify.system.ShopifySystemMessageServices.generate#CreatedProductIdsFeed"
            receivePath="${contentRoot}/shopify/CreatedProductIdsFeed/CreatedProductIdsFeed-${dateTime}-${systemMessageId}.json"/>

    <!-- SystemMessageType record for generating Created Products Feed -->
    <moqui.service.message.SystemMessageType systemMessageTypeId="GenerateCreatedProductsFeed"
            description="Generate Created Products Feed"
            parentTypeId="LocalFeedFile"
            sendPath="${contentRoot}/shopify/CreatedProductsFeed/CreatedProductsFeed-${dateTime}-${systemMessageId}.json"
            consumeServiceName="co.hotwax.shopify.system.ShopifySystemMessageServices.generate#CreatedProductsFeed"/>

    <moqui.service.message.SystemMessageType systemMessageTypeId="SendCreatedProductsFeed"
            description="Send Created Products Feed"
            parentTypeId="LocalFeedFile"
            sendServiceName="co.hotwax.ofbiz.SystemMessageServices.send#SystemMessageFileSftp"
            sendPath=""/>

    <!-- Enumeration to create relation between GenerateCreatedProductIdsFeed, GenerateCreatedProductsFeed and SendCreatedProductsFeed SystemMessageType(s) -->
    <moqui.basic.Enumeration description="Send Created Products Feed" enumId="SendCreatedProductsFeed" enumTypeId="ShopifyMessageTypeEnum"/>
    <moqui.basic.Enumeration description="Generate CreatedProducts Feed" enumId="GenerateCreatedProductsFeed" enumTypeId="ShopifyMessageTypeEnum" relatedEnumId="SendCreatedProductsFeed" relatedEnumTypeId="ShopifyMessageTypeEnum"/>
    <moqui.basic.Enumeration description="Generate Created Product Ids Feed" enumId="GenerateCreatedProductIdsFeed" enumTypeId="ShopifyMessageTypeEnum" relatedEnumId="GenerateCreatedProductsFeed" relatedEnumTypeId="ShopifyMessageTypeEnum"/>

    <!-- ServiceJob data for queuing Created productIds feed -->
    <moqui.service.job.ServiceJob jobName="queue_CreatedProductIdsFeed" description="Queue created productIds feed"
            serviceName="co.hotwax.shopify.system.ShopifySystemMessageServices.queue#FeedSystemMessage" cronExpression="0 0 * * * ?" paused="Y">
        <parameters parameterName="systemMessageTypeId" parameterValue="GenerateCreatedProductIdsFeed"/>
        <parameters parameterName="systemMessageRemoteId" parameterValue=""/>
        <parameters parameterName="runAsBatch" parameterValue="true"/>
    </moqui.service.job.ServiceJob>

    <moqui.resource.DbResource filename="ShippingLinesByOrderIdQuery.ftl" isFile="Y" resourceId="ShippingLinesByOrderIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query {
                    node(id: "${shopifyOrderId}") {
                        id
                        ... on
                        Order {
                            id
                            shippingLines (first: 10<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                edges {
                                    node {
                                        title
                                        originalPriceSet {
                                            presentmentMoney {
                                                amount
                                                currencyCode
                                            }
                                        }
                                        discountAllocations {
                                            allocatedAmountSet {
                                                presentmentMoney {
                                                    amount
                                                    currencyCode
                                                }
                                            }
                                            discountApplication {
                                                ... on DiscountCodeApplication {
                                                    code
                                                    targetType
                                                    value {
                                                        ... on PricingPercentageValue {
                                                            percentage
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        taxLines {
                                            title
                                            priceSet {
                                                presentmentMoney {
                                                    amount
                                                    currencyCode
                                                }
                                            }
                                        }
                                    }
                                }
                                pageInfo {
                                    endCursor
                                    hasNextPage
                                }
                            }
                        }
                    }
                }
                </@compress>]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="NewOrderIdsQuery.ftl" isFile="Y" resourceId="NewOrderIdsQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[
                    <#ftl output_format="HTML">
                    <@compress single_line=true>
                        <#if queryParams.fromDate?has_content && !queryParams.thruDate?has_content>
                            <#assign filterQuery = "created_at:>'${queryParams.fromDate}'"/>
                        </#if>
                        <#if queryParams.thruDate?has_content && !queryParams.fromDate?has_content>
                            <#assign filterQuery = "created_at:<'${queryParams.thruDate}'"/>
                        </#if>
                        <#if queryParams.fromDate?has_content && queryParams.thruDate?has_content>
                            <#assign filterQuery = "created_at:>'${queryParams.fromDate}' AND created_at:<'${queryParams.thruDate}'"/>
                        </#if>
                        query {
                            orders (first: 100<#if cursor?has_content>, after: "${cursor}"</#if><#if filterQuery?has_content>, query: "${filterQuery}")</#if> {
                                edges {
                                    node {
                                        id
                                        name
                                    }
                                }
                                pageInfo {
                                    endCursor
                                    hasNextPage
                                }
                            }
                        }
                    </@compress>
                ]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>

    <!-- SystemMessageType record for generating New Order Ids Feed -->
    <moqui.service.message.SystemMessageType systemMessageTypeId="GenerateNewOrderIdsFeed"
            description="Generate New Order Ids Feed"
            sendPath="dbresource://shopify/template/graphQL/NewOrderIdsQuery.ftl"
            sendServiceName="co.hotwax.shopify.system.ShopifySystemMessageServices.generate#NewOrderIdsFeed"
            receivePath="${contentRoot}/shopify/NewOrderIdsFeed/NewOrderIdsFeed-${dateTime}-${systemMessageId}.json"/>

    <!-- SystemMessageType record for generating New Orders Feed -->
    <moqui.service.message.SystemMessageType systemMessageTypeId="GenerateNewOrdersFeed"
            description="Generate New Orders Feed"
            parentTypeId="LocalFeedFile"
            sendPath="${contentRoot}/shopify/NewOrdersFeed/NewOrdersFeed-${dateTime}-${systemMessageId}.json"
            consumeServiceName="co.hotwax.shopify.system.ShopifySystemMessageServices.generate#NewOrdersFeed"/>

    <moqui.service.message.SystemMessageType systemMessageTypeId="SendNewOrdersFeed"
            description="Send New Orders Feed"
            parentTypeId="LocalFeedFile"
            sendServiceName="co.hotwax.ofbiz.SystemMessageServices.send#SystemMessageFileSftp"
            sendPath=""/>

    <!-- Enumeration to create relation between GenerateNewOrderIdsFeed, GenerateNewOrdersFeed and SendNewOrdersFeed SystemMessageType(s) -->
    <moqui.basic.Enumeration description="Send New Orders Feed" enumId="SendNewOrdersFeed" enumTypeId="ShopifyMessageTypeEnum"/>
    <moqui.basic.Enumeration description="Generate New Orders Feed" enumId="GenerateNewOrdersFeed" enumTypeId="ShopifyMessageTypeEnum" relatedEnumId="SendNewOrdersFeed" relatedEnumTypeId="ShopifyMessageTypeEnum"/>
    <moqui.basic.Enumeration description="Generate New Order Ids Feed" enumId="GenerateNewOrderIdsFeed" enumTypeId="ShopifyMessageTypeEnum" relatedEnumId="GenerateNewOrdersFeed" relatedEnumTypeId="ShopifyMessageTypeEnum"/>

    <!-- ServiceJob data for queuing New orderIds feed -->
    <moqui.service.job.ServiceJob jobName="queue_NewOrderIdsFeed" description="Queue new orderIds feed"
            serviceName="co.hotwax.shopify.system.ShopifySystemMessageServices.queue#FeedSystemMessage" cronExpression="0 0 * * * ?" paused="Y">
        <parameters parameterName="systemMessageTypeId" parameterValue="GenerateNewOrderIdsFeed"/>
        <parameters parameterName="systemMessageRemoteId" parameterValue=""/>
        <parameters parameterName="runAsBatch" parameterValue="true"/>
    </moqui.service.job.ServiceJob>

    <moqui.resource.DbResource filename="UpdatedProductIdsQuery.ftl" isFile="Y" resourceId="UpdatedProductIdsQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[
                    <#ftl output_format="HTML">
                    <@compress single_line=true>
                        <#if queryParams.fromDate?has_content && !queryParams.thruDate?has_content>
                            <#assign filterQuery = "updated_at:>'${queryParams.fromDate}'"/>
                        </#if>
                        <#if queryParams.thruDate?has_content && !queryParams.fromDate?has_content>
                            <#assign filterQuery = "updated_at:<'${queryParams.thruDate}'"/>
                        </#if>
                        <#if queryParams.fromDate?has_content && queryParams.thruDate?has_content>
                            <#assign filterQuery = "updated_at:>'${queryParams.fromDate}' AND updated_at:<'${queryParams.thruDate}'"/>
                        </#if>
                        query {
                            products (first: 100<#if cursor?has_content>, after: "${cursor}"</#if><#if filterQuery?has_content>, query: "${filterQuery}")</#if> {
                                edges {
                                    node {
                                        id
                                    }
                                }
                                pageInfo {
                                    endCursor
                                    hasNextPage
                                }
                            }
                        }
                    </@compress>
                ]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>

    <!-- SystemMessageType record for generating Updated Product Ids Feed -->
    <moqui.service.message.SystemMessageType systemMessageTypeId="GenerateUpdatedProductIdsFeed"
            description="Generate Updated Product Ids Feed"
            sendPath="dbresource://shopify/template/graphQL/UpdatedProductIdsQuery.ftl"
            sendServiceName="co.hotwax.shopify.system.ShopifySystemMessageServices.generate#UpdatedProductIdsFeed"
            receivePath="${contentRoot}/shopify/UpdatedProductIdsFeed/UpdatedProductIdsFeed-${dateTime}-${systemMessageId}.json"/>

    <!-- SystemMessageType record for generating Product Updates Feed -->
    <moqui.service.message.SystemMessageType systemMessageTypeId="GenerateProductUpdatesFeed"
            description="Generate Product Updates Feed"
            parentTypeId="LocalFeedFile"
            sendPath="${contentRoot}/shopify/ProductUpdatesFeed/ProductUpdatesFeed-${dateTime}-${systemMessageId}.json"
            consumeServiceName="co.hotwax.shopify.system.ShopifySystemMessageServices.generate#ProductUpdatesFeed"/>

    <moqui.service.message.SystemMessageType systemMessageTypeId="SendProductUpdatesFeed"
            description="Send Product Updates Feed"
            parentTypeId="LocalFeedFile"
            sendServiceName="co.hotwax.ofbiz.SystemMessageServices.send#SystemMessageFileSftp"
            sendPath=""/>

    <!-- Enumeration to create relation between GenerateUpdatedProductIdsFeed, GenerateProductUpdatesFeed and SendProductUpdatesFeed SystemMessageType(s) -->
    <moqui.basic.Enumeration description="Send Product Updates Feed" enumId="SendProductUpdatesFeed" enumTypeId="ShopifyMessageTypeEnum"/>
    <moqui.basic.Enumeration description="Generate Product Updates Feed" enumId="GenerateProductUpdatesFeed" enumTypeId="ShopifyMessageTypeEnum" relatedEnumId="SendProductUpdatesFeed" relatedEnumTypeId="ShopifyMessageTypeEnum"/>
    <moqui.basic.Enumeration description="Generate Updated Product Ids Feed" enumId="GenerateUpdatedProductIdsFeed" enumTypeId="ShopifyMessageTypeEnum" relatedEnumId="GenerateProductUpdatesFeed" relatedEnumTypeId="ShopifyMessageTypeEnum"/>

    <!-- ServiceJob data for queuing Updated productIds feed -->
    <moqui.service.job.ServiceJob jobName="queue_UpdatedProductIdsFeed" description="Queue updated productIds feed"
            serviceName="co.hotwax.shopify.system.ShopifySystemMessageServices.queue#FeedSystemMessage" cronExpression="0 0 * * * ?" paused="Y">
        <parameters parameterName="systemMessageTypeId" parameterValue="GenerateUpdatedProductIdsFeed"/>
        <parameters parameterName="systemMessageRemoteId" parameterValue=""/>
        <parameters parameterName="runAsBatch" parameterValue="true"/>
    </moqui.service.job.ServiceJob>

    <!-- SystemMessageType record for shopify ORDERS_CREATE webhook -->
    <moqui.service.message.SystemMessageType systemMessageTypeId="OrdersCreate"
                                             description="Shopify Orders Create Webhook"
                                             parentTypeId="ShopifyWebhook"
                                             sendServiceName="co.hotwax.shopify.webhook.ShopifyWebhookServices.send#WebhookSubscriptionSystemMessage"
                                             sendPath="component://shopify-connector/template/graphQL/WebhookSubscriptionCreate.ftl"
                                             consumeServiceName="co.hotwax.shopify.webhook.ShopifyWebhookServices.consume#OrdersCreateWebhookPayloadSystemMessage">
        <parameters parameterName="topic" parameterValue="ORDERS_CREATE" systemMessageRemoteId=""/>
        <parameters parameterName="resourceId" parameterValue="OrderTransformation" systemMessageRemoteId=""/>
    </moqui.service.message.SystemMessageType>

    <!-- Enumeration for mapping OrdersCreate SystemMessageType to orders/create shopify webhook topic -->
    <moqui.basic.Enumeration description="Shopify Orders Create Webhook" enumId="OrdersCreate"
                             enumTypeId="ShopifyMessageTypeEnum" enumCode="orders/create"/>
</entity-facade-xml>