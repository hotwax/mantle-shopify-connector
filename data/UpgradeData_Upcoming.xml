<?xml version="1.0" encoding="UTF-8"?>
<entity-facade-xml type="seed">
    <moqui.resource.DbResource filename="OrderHeaderByIdQuery.ftl" isFile="Y" resourceId="OrderHeaderByIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query{
                    node(id: "${shopifyOrderId}") {
                        id
                        ... on
                        Order {
                            id
                            name
                            updatedAt
                            returnStatus
                            taxesIncluded
                            customer {
                                id
                                firstName
                                lastName
                                email
                                phone
                            }
                            originalTotalPriceSet {
                                presentmentMoney {
                                    amount
                                    currencyCode
                                }
                            }
                            currentTotalPriceSet {
                                presentmentMoney {
                                    amount
                                    currencyCode
                                }
                            }
                            channelInformation {
                                channelId
                                channelDefinition {
                                    channelName
                                }
                            }
                            billingAddress {
                                firstName
                                lastName
                                address1
                                address2
                                city
                                provinceCode
                                countryCodeV2
                                phone
                                zip
                            }
                            transactions {
                                id
                                parentTransaction {
                                    id
                                }
                                kind
                                status
                                processedAt
                                amountSet {
                                    presentmentMoney {
                                        amount
                                        currencyCode
                                    }
                                }
                                gateway
                                paymentDetails {
                                    ... on CardPaymentDetails {
                                        company
                                    }
                                }
                            }
                        }
                    }
                }
                </@compress>]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="OrderLineItemByIdQuery.ftl" isFile="Y" resourceId="OrderLineItemByIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query {
                    node(id: "${shopifyOrderId}") {
                        id
                        ... on
                        Order {
                            id
                            name
                            lineItems (first: 10<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                edges {
                                    node {
                                        id
                                        variant {
                                            id
                                            barcode
                                            sku
                                        }
                                        quantity
                                        currentQuantity
                                        fulfillableQuantity
                                        fulfillmentStatus
                                    }
                                }
                                pageInfo {
                                    endCursor
                                    hasNextPage
                                }
                            }
                        }
                    }
                }
                </@compress>]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="ReturnHeaderByIdQuery.ftl" isFile="Y" resourceId="ReturnHeaderByIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query{
                    node(id: "${returnId}") {
                        id
                        ... on
                        Return {
                            id
                            status
                            name
                        }
                    }
                }
                </@compress>]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="ReturnLineItemByIdQuery.ftl" isFile="Y" resourceId="ReturnLineItemByIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query{
                    node(id: "${returnId}") {
                        id
                        ... on
                        Return{
                            id
                            returnLineItems (first: 10<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                edges {
                                    node {
                                        id
                                        returnReason
                                        returnReasonNote
                                        fulfillmentLineItem {
                                            lineItem {
                                                id
                                                sku
                                                quantity
                                            }
                                        }
                                        quantity
                                        withCodeDiscountedTotalPriceSet {
                                            presentmentMoney {
                                                amount
                                                currencyCode
                                            }
                                        }
                                    }
                                }
                                pageInfo{
                                    endCursor
                                    hasNextPage
                                }
                            }
                        }
                    }
                }
                </@compress>]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="ExchangeLineItemByIdQuery.ftl" isFile="Y" resourceId="ExchangeLineItemByIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query{
                    node(id: "${returnId}"){
                        id
                        ... on
                        Return{
                            id
                            exchangeLineItems (first: 10<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                edges{
                                    node{
                                        id
                                        lineItem {
                                            id
                                            quantity
                                            sku
                                            variantTitle
                                            product {
                                                id
                                                title
                                            }
                                            originalUnitPriceSet {
                                                presentmentMoney {
                                                    amount
                                                    currencyCode
                                                }
                                            }
                                            originalTotalSet {
                                                presentmentMoney {
                                                    amount
                                                    currencyCode
                                                }
                                            }
                                            discountedUnitPriceSet {
                                                presentmentMoney {
                                                    amount
                                                    currencyCode
                                                }
                                            }
                                            discountedUnitPriceAfterAllDiscountsSet {
                                                presentmentMoney {
                                                    amount
                                                    currencyCode
                                                }
                                            }
                                            discountAllocations {
                                                allocatedAmountSet {
                                                    presentmentMoney {
                                                        amount
                                                        currencyCode
                                                    }
                                                }
                                            }
                                            taxLines {
                                                priceSet {
                                                    presentmentMoney {
                                                        amount
                                                        currencyCode
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                pageInfo{
                                    endCursor
                                    hasNextPage
                                }
                            }
                        }
                    }
                }
                </@compress>]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="ReturnsByOrderIDQuery.ftl" isFile="Y" resourceId="ReturnsByOrderIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query{
                    node(id: "${shopifyOrderId}") {
                        id
                        ... on
                        Order {
                            id
                            name
                            returns (first: 10<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                edges {
                                    node {
                                        id
                                    }
                                }
                                pageInfo{
                                    endCursor
                                    hasNextPage
                                }
                            }
                        }
                    }
                }
                </@compress>]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="FulfillmentOrdersByOrderIdQuery.ftl" isFile="Y" resourceId="FulfillmentOrdersByOrderIdQuery"
                               parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query{
                    node(id: "${shopifyOrderId}") {
                        id
                        ... on
                        Order {
                            id
                            name
                            fulfillmentOrders (first: 10<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                edges {
                                    node {
                                        id
                                    }
                                }
                                pageInfo{
                                    endCursor
                                    hasNextPage
                                }
                            }
                        }
                    }
                }
                </@compress>]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="FulfillmentOrderHeaderByIdQuery.ftl" isFile="Y" resourceId="FulfillmentOrderHeaderByIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query{
                    node(id: "${fulfillmentOrderId}") {
                        id
                        ... on
                        FulfillmentOrder {
                            id
                            status
                            updatedAt
                            fulfillAt
                            channelId
                            assignedLocation {
                                location {
                                    id
                                }
                            }
                        }
                    }
                }
                </@compress>]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="FulfillmentOrderLineItemsByIdQuery.ftl" isFile="Y" resourceId="FulfillmentOrderLineItemsByIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query{
                    node(id: "${fulfillmentOrderId}") {
                        id
                        ... on
                        FulfillmentOrder {
                            id
                            lineItems (first : 10<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                edges{
                                    node {
                                        id
                                        sku
                                        variantTitle
                                        productTitle
                                        lineItem {
                                            id
                                        }
                                    }
                                }
                                pageInfo{
                                    endCursor
                                    hasNextPage
                                }
                            }
                        }
                    }
                }
                </@compress>]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="ReturnedOrderIdsQuery.ftl" isFile="Y" resourceId="ReturnedOrderIdsQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[
                    <#ftl output_format="HTML">
                    <@compress single_line=true>
                        <#if queryParams.fromDate?has_content && !queryParams.thruDate?has_content>
                            <#assign filterQuery = "updated_at:>'${queryParams.fromDate}' AND return_status:'RETURNED'"/>
                        </#if>
                        <#if queryParams.thruDate?has_content && !queryParams.fromDate?has_content>
                            <#assign filterQuery = "updated_at:<'${queryParams.thruDate}' AND return_status:'RETURNED'"/>
                        </#if>
                        <#if queryParams.fromDate?has_content && queryParams.thruDate?has_content>
                            <#assign filterQuery = "updated_at:>'${queryParams.fromDate}' AND updated_at:<'${queryParams.thruDate}' AND return_status:'RETURNED'"/>
                        </#if>
                        <#if !filterQuery?has_content>
                            <#assign filterQuery = "return_status:'RETURNED'"/>
                        </#if>
                        query {
                            orders (first: 100<#if cursor?has_content>, after: "${cursor}"</#if><#if filterQuery?has_content>, query: "${filterQuery}")</#if> {
                                edges {
                                    node {
                                        id
                                        name
                                        returnStatus
                                    }
                                }
                                pageInfo {
                                    endCursor
                                    hasNextPage
                                }
                            }
                        }
                    </@compress>
                ]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="RefundIdsByReturnIdQuery.ftl" isFile="Y" resourceId="RefundIdsByReturnIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[
                    <#ftl output_format="HTML">
                    <@compress single_line=true>
                        query{
                            node(id: "${returnId}") {
                                id
                                ... on
                                Return {
                                    refunds (first: 10<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                        edges {
                                            node {
                                                id
                                            }
                                        }
                                        pageInfo {
                                            endCursor
                                            hasNextPage
                                        }
                                    }
                                }
                            }
                        }
                    </@compress>
                ]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="RefundLineItemsByIdQuery.ftl" isFile="Y" resourceId="RefundLineItemsByIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[
                    <#ftl output_format="HTML">
                    <@compress single_line=true>
                        query {
                            node(id: "${shopifyRefundId}") {
                                id
                                ... on
                                Refund {
                                    id
                                    refundLineItems (first : 10<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                        edges {
                                            node {
                                                lineItem {
                                                    id
                                                }
                                                location {
                                                    id
                                                }
                                                restockType
                                                quantity
                                            }
                                        }
                                        pageInfo {
                                            hasNextPage
                                            endCursor
                                        }
                                    }
                                }
                            }
                        }
                    </@compress>
                ]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="RefundTransactionsByIdQuery.ftl" isFile="Y" resourceId="RefundTransactionsByIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[
                    <#ftl output_format="HTML">
                    <@compress single_line=true>
                        query {
                            node(id: "${shopifyRefundId}") {
                                id
                                ... on
                                Refund {
                                    id
                                    transactions (first : 10<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                        edges {
                                            node {
                                                id
                                                parentTransaction {
                                                    id
                                                }
                                                status
                                                amountSet {
                                                    presentmentMoney {
                                                        amount
                                                        currencyCode
                                                    }
                                                }
                                                kind
                                                gateway
                                                paymentDetails {
                                                    ... on CardPaymentDetails {
                                                        company
                                                    }
                                                }
                                            }
                                        }
                                        pageInfo {
                                            endCursor
                                            hasNextPage
                                        }
                                    }
                                }
                            }
                        }
                    </@compress>
                ]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="ReverseFulfillmentOrdersByIdQuery.ftl" isFile="Y" resourceId="ReverseFulfillmentOrdersByIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query{
                    node(id: "${returnId}") {
                        id
                        ... on
                        Return {
                            id
                            reverseFulfillmentOrders (first: 10<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                edges {
                                    node {
                                        id
                                        status
                                    }
                                }
                                pageInfo {
                                    endCursor
                                    hasNextPage
                                }
                            }
                        }
                    }
                }
                </@compress>]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="ReverseFulfillmentOrderLineItemsByIdQuery.ftl" isFile="Y" resourceId="ReverseLineItemsByIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query{
                    node(id: "${reverseFulfillmentOrderId}") {
                        id
                        ... on
                        ReverseFulfillmentOrder {
                            id
                            lineItems (first: 10<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                edges {
                                    node {
                                        fulfillmentLineItem {
                                            lineItem {
                                                id
                                            }
                                        }
                                        dispositions {
                                            location {
                                                id
                                            }
                                            type
                                            quantity
                                        }
                                    }
                                }
                                pageInfo {
                                    endCursor
                                    hasNextPage
                                }
                            }
                        }
                    }
                }
                </@compress>]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="BulkCanceledOrdersAndItemsQuery.ftl" isFile="Y" resourceId="BulkCanceledOrdersAndItemsQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                    <#if queryParams?has_content>
                        <#if queryParams.filterQuery?has_content>
                            <#assign filterQuery = queryParams.filterQuery/>
                        <#else>
                            <#if queryParams.fromDateLabel?has_content>
                                <#assign fromDateLabel = queryParams.fromDateLabel/>
                            <#else>
                                <#assign fromDateLabel = "updated_at"/>
                            </#if>
                            <#if queryParams.thruDateLabel?has_content>
                                <#assign thruDateLabel = queryParams.thruDateLabel/>
                            <#else>
                                <#assign thruDateLabel = "updated_at"/>
                            </#if>
                            <#if queryParams.fromDate?has_content && !queryParams.thruDate?has_content>
                                <#assign filterQuery = "${fromDateLabel}:>'${queryParams.fromDate}'"/>
                            </#if>
                            <#if queryParams.thruDate?has_content && !queryParams.fromDate?has_content>
                                <#assign filterQuery = "${thruDateLabel}:<'${queryParams.thruDate}'"/>
                            </#if>
                            <#if queryParams.fromDate?has_content && queryParams.thruDate?has_content>
                                <#assign filterQuery = "${fromDateLabel}:>'${queryParams.fromDate}' AND ${thruDateLabel}:<'${queryParams.thruDate}'"/>
                            </#if>
                        </#if>
                    </#if>
                    mutation {
                        bulkOperationRunQuery(
                            query: """ {
                                orders<#if filterQuery?has_content>(query:"${filterQuery}")</#if> {
                                    edges {
                                        node {
                                            id
                                            name
                                            displayFulfillmentStatus
                                            cancelledAt
                                            cancelReason
                                            cancellation {
                                                staffNote
                                            }
                                            transactions {
                                                id
                                                parentTransaction {
                                                    id
                                                }
                                                kind
                                                status
                                                processedAt
                                                amountSet {
                                                    presentmentMoney {
                                                        amount
                                                        currencyCode
                                                    }
                                                }
                                                gateway
                                                paymentDetails {
                                                    ... on CardPaymentDetails {
                                                        company
                                                    }
                                                }
                                            }
                                            lineItems {
                                                edges {
                                                    node {
                                                        id
                                                        sku
                                                        quantity
                                                        currentQuantity
                                                        unfulfilledQuantity
                                                        nonFulfillableQuantity
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        """ ) {
                            bulkOperation {
                                id
                                status
                            }
                            userErrors {
                                field
                                message
                            }
                        }
                    }
                </@compress>]]>
            </fileData>
            <histories versionName="01" previousVersionName="01"/>
        </file>
    </moqui.resource.DbResource>

    <!-- SystemMessageType record for generating Returned Order Ids Feed -->
    <moqui.service.message.SystemMessageType systemMessageTypeId="GenerateReturnedOrderIdsFeed"
            description="Generate Returned Order Ids Feed"
            sendPath="dbresource://shopify/template/graphQL/ReturnedOrderIdsQuery.ftl"
            sendServiceName="co.hotwax.shopify.system.ShopifySystemMessageServices.generate#ReturnedOrderIdsFeed"
            receivePath="${contentRoot}/shopify/ReturnedOrderIdsFeed/ReturnedOrderIdsFeed-${dateTime}-${systemMessageId}.json">
    </moqui.service.message.SystemMessageType>

    <!-- SystemMessageType record for generating Returns and Exchange Feed -->
    <moqui.service.message.SystemMessageType systemMessageTypeId="GenerateReturnsAndExchangeFeed"
            description="Generate Returns and Exchange Feed"
            parentTypeId="LocalFeedFile"
            sendPath="${contentRoot}/shopify/ReturnsAndExchangeFeed/ReturnsAndExchangeFeed-${dateTime}-${systemMessageId}.json"
            consumeServiceName="co.hotwax.shopify.system.ShopifySystemMessageServices.generate#ReturnsAndExchangeFeed">
    </moqui.service.message.SystemMessageType>

    <moqui.service.message.SystemMessageType systemMessageTypeId="SendReturnsAndExchangeFeed"
            description="Send Returns and Exchange Feed"
            parentTypeId="LocalFeedFile"
            sendServiceName="co.hotwax.ofbiz.SystemMessageServices.send#SystemMessageFileSftp"
            sendPath="">
    </moqui.service.message.SystemMessageType>

    <!-- Enumeration to create relation between GenerateReturnedOrderIdsFeed, GenerateReturnsAndExchangeFeed and SendReturnsAndExchangeFeed SystemMessageType(s) -->
    <moqui.basic.Enumeration description="Send Returns And Exchange Feed" enumId="SendReturnsAndExchangeFeed" enumTypeId="ShopifyMessageTypeEnum"/>
    <moqui.basic.Enumeration description="Generate Returns And Exchange Feed" enumId="GenerateReturnsAndExchangeFeed" enumTypeId="ShopifyMessageTypeEnum" relatedEnumId="SendReturnsAndExchangeFeed" relatedEnumTypeId="ShopifyMessageTypeEnum"/>
    <moqui.basic.Enumeration description="Generate Returned Order Ids Feed" enumId="GenerateReturnedOrderIdsFeed" enumTypeId="ShopifyMessageTypeEnum" relatedEnumId="GenerateReturnsAndExchangeFeed" relatedEnumTypeId="ShopifyMessageTypeEnum"/>

    <!-- ServiceJob data for queuing returned orderIds feed -->
    <moqui.service.job.ServiceJob jobName="queue_ReturnedOrderIdsFeed" description="Queue returned orderIds feed"
            serviceName="co.hotwax.shopify.system.ShopifySystemMessageServices.queue#ReturnedOrderIdsFeed" cronExpression="0 0 * * * ?" paused="Y">
        <parameters parameterName="systemMessageTypeId" parameterValue="GenerateReturnedOrderIdsFeed"/>
        <parameters parameterName="systemMessageRemoteId" parameterValue=""/>
        <parameters parameterName="fromDate" parameterValue=""/>
        <parameters parameterName="thruDate" parameterValue=""/>
    </moqui.service.job.ServiceJob>

    <!-- SystemMessageType record for bulk canceled orders and items query to Shopify -->
    <moqui.service.message.SystemMessageType systemMessageTypeId="BulkCanceledOrdersAndItemsQuery"
            description="Bulk Canceled Orders and Items Query System Message"
            parentTypeId="ShopifyBulkQuery"
            sendServiceName="co.hotwax.shopify.system.ShopifySystemMessageServices.send#BulkQuerySystemMessage"
            sendPath="dbresource://shopify/template/graphQL/BulkCanceledOrdersAndItemsQuery.ftl"
            consumeServiceName="co.hotwax.shopify.system.ShopifySystemMessageServices.consume#BulkOperationResult"
            receivePath="${contentRoot}/shopify/BulkCanceledOrdersAndItemsQuery/BulkOperationResult-${systemMessageId}-${remoteMessageId}-${nowDate}.jsonl">
    </moqui.service.message.SystemMessageType>

    <!-- SystemMessageType record for sending bulk canceled orders and items query result to SFTP -->
    <moqui.service.message.SystemMessageType systemMessageTypeId="SendBulkCanceledOrdersAndItemsQueryResult"
            description="Send Bulk Canceled Orders and Items Query Result"
            parentTypeId="LocalFeedFile"
            sendServiceName="co.hotwax.ofbiz.SystemMessageServices.send#SystemMessageFileSftp"
            sendPath=""/>

    <!-- Enumeration to create relation between BulkCanceledOrdersAndItemsQuery and SendBulkCanceledOrdersAndItemsQueryResult SystemMessageType(s) -->
    <moqui.basic.Enumeration description="Send Bulk Canceled Orders and Items Query Result" enumId="SendBulkCanceledOrdersAndItemsQueryResult" enumTypeId="ShopifyMessageTypeEnum"/>
    <moqui.basic.Enumeration description="Bulk Canceled Orders and Items Query" enumId="BulkCanceledOrdersAndItemsQuery" enumTypeId="ShopifyMessageTypeEnum" relatedEnumId="SendBulkCanceledOrdersAndItemsQueryResult" relatedEnumTypeId="ShopifyMessageTypeEnum"/>

    <!-- SystemMessageType record for generating Updated Order Ids Feed -->
    <moqui.service.message.SystemMessageType systemMessageTypeId="GenerateUpdatedOrderIdsFeed"
            description="Generate Updated Order Ids Feed"
            sendPath="dbresource://shopify/template/graphQL/UpdatedOrderIdsQuery.ftl"
            sendServiceName="co.hotwax.shopify.system.ShopifySystemMessageServices.generate#UpdatedOrderIdsFeed"
            receivePath="${contentRoot}/shopify/UpdatedOrderIdsFeed/UpdatedOrderIdsFeed-${dateTime}-${systemMessageId}.json">
    </moqui.service.message.SystemMessageType>

    <!-- SystemMessageType record for generating Order Updates Feed -->
    <moqui.service.message.SystemMessageType systemMessageTypeId="GenerateOrderUpdatesFeed"
            description="Generate Order Updates Feed"
            parentTypeId="LocalFeedFile"
            sendPath="${contentRoot}/shopify/OrderUpdatesFeed/OrderUpdatesFeed-${dateTime}-${systemMessageId}.json"
            consumeServiceName="co.hotwax.shopify.system.ShopifySystemMessageServices.generate#OrderUpdatesFeed">
        <parameters parameterName="sendSmrId" parameterValue="" systemMessageRemoteId=""/>
    </moqui.service.message.SystemMessageType>

    <moqui.service.message.SystemMessageType systemMessageTypeId="SendOrderUpdatesFeed"
        description="Send Order Updates Feed"
        parentTypeId="LocalFeedFile"
        sendServiceName="co.hotwax.ofbiz.SystemMessageServices.send#SystemMessageFileSftp"
        sendPath="">
    </moqui.service.message.SystemMessageType>

    <!-- Enumeration to create relation between GenerateUpdatedOrderIdsFeed, GenerateUpdatedOrderIdsFeed and SendOrderUpdatesFeed SystemMessageType(s) -->
    <moqui.basic.Enumeration description="Send Order Updates Feed" enumId="SendOrderUpdatesFeed" enumTypeId="ShopifyMessageTypeEnum"/>
    <moqui.basic.Enumeration description="Generate Order Updates Feed" enumId="GenerateOrderUpdatesFeed" enumTypeId="ShopifyMessageTypeEnum" relatedEnumId="SendOrderUpdatesFeed" relatedEnumTypeId="ShopifyMessageTypeEnum"/>
    <moqui.basic.Enumeration description="Generate Updated Order Ids Feed" enumId="GenerateUpdatedOrderIdsFeed" enumTypeId="ShopifyMessageTypeEnum" relatedEnumId="GenerateOrderUpdatesFeed" relatedEnumTypeId="ShopifyMessageTypeEnum"/>

    <!-- ServiceJob data for queuing Updated orderIds feed -->
    <moqui.service.job.ServiceJob jobName="queue_UpdatedOrderIdsFeed" description="Queue orderIds by tag feed"
            serviceName="co.hotwax.shopify.system.ShopifySystemMessageServices.queue#FeedSystemMessage" cronExpression="0 0 * * * ?" paused="Y">
        <parameters parameterName="systemMessageTypeId" parameterValue="GenerateUpdatedOrderIdsFeed"/>
        <parameters parameterName="systemMessageRemoteId" parameterValue=""/>
        <parameters parameterName="runAsBatch" parameterValue="true"/>
    </moqui.service.job.ServiceJob>

    <!-- SystemMessageType record for shopify ORDERS_CREATE webhook -->
    <moqui.service.message.SystemMessageType systemMessageTypeId="OrdersCreate"
                                             description="Shopify Orders Create Webhook"
                                             parentTypeId="ShopifyWebhook"
                                             sendServiceName="co.hotwax.shopify.webhook.ShopifyWebhookServices.send#WebhookSubscriptionSystemMessage"
                                             sendPath="component://shopify-connector/template/graphQL/WebhookSubscriptionCreate.ftl"
                                             consumeServiceName="co.hotwax.shopify.webhook.ShopifyWebhookServices.consume#OrdersCreateWebhookPayloadSystemMessage">
        <parameters parameterName="topic" parameterValue="ORDERS_CREATE" systemMessageRemoteId=""/>
        <parameters parameterName="resourceId" parameterValue="OrderTransformation" systemMessageRemoteId=""/>
    </moqui.service.message.SystemMessageType>

    <!-- Enumeration for mapping OrdersCreate SystemMessageType to orders/create shopify webhook topic -->
    <moqui.basic.Enumeration description="Shopify Orders Create Webhook" enumId="OrdersCreate"
                             enumTypeId="ShopifyMessageTypeEnum" enumCode="orders/create"/>
</entity-facade-xml>