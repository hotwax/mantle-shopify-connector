<?xml version="1.0" encoding="UTF-8"?>
<entity-facade-xml type="seed">
    <!--    DbResource of Shopify GraphQL Templates-->
    <moqui.resource.DbResource filename="shopify" isFile="N" resourceId="Shopify" parentResourceId=""/>
    <moqui.resource.DbResource filename="template" isFile="N" resourceId="Template" parentResourceId="Shopify"/>
    <moqui.resource.DbResource filename="graphQL" isFile="N" resourceId="GraphQL" parentResourceId="Template"/>
    <moqui.resource.DbResource filename="OrderHeaderByIdQuery.ftl" isFile="Y" resourceId="OrderHeaderByIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query{
                    node(id: "${shopifyOrderId}") {
                        id
                        ... on
                        Order {
                            id
                            name
                            updatedAt
                            returnStatus
                            customer {
                                id
                                firstName
                                lastName
                                email
                                phone
                            }
                            originalTotalPriceSet {
                                presentmentMoney {
                                    amount
                                    currencyCode
                                }
                            }
                            currentTotalPriceSet {
                                presentmentMoney {
                                    amount
                                    currencyCode
                                }
                            }
                            channelInformation {
                                channelId
                                channelDefinition {
                                    channelName
                                }
                            }
                            billingAddress {
                                firstName
                                lastName
                                address1
                                address2
                                city
                                provinceCode
                                countryCodeV2
                                phone
                                zip
                            }
                        }
                    }
                }
                </@compress>]]>
            </fileData>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="OrderLineItemByIdQuery.ftl" isFile="Y" resourceId="OrderLineItemByIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query {
                    node(id: "${shopifyOrderId}") {
                        id
                        ... on
                        Order {
                            id
                            name
                            lineItems (first: 3<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                edges {
                                    node {
                                        id
                                        variant {
                                            id
                                            barcode
                                            sku
                                        }
                                        quantity
                                    }
                                }
                                pageInfo {
                                    endCursor
                                    hasNextPage
                                }
                            }
                        }
                    }
                }
                </@compress>]]>
            </fileData>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="ReturnHeaderByIdQuery.ftl" isFile="Y" resourceId="ReturnHeaderByIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query{
                    node(id: "${returnId}") {
                        id
                        ... on
                        Return {
                            id
                            status
                            name
                        }
                    }
                }
                </@compress>]]>
            </fileData>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="ReturnLineItemByIdQuery.ftl" isFile="Y" resourceId="ReturnLineItemByIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query{
                    node(id: "${returnId}") {
                        id
                        ... on
                        Return{
                            id
                            returnLineItems (first: 5<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                edges {
                                    node {
                                        id
                                        fulfillmentLineItem {
                                            lineItem {
                                                quantity
                                            }
                                        }
                                        quantity
                                        withCodeDiscountedTotalPriceSet {
                                            presentmentMoney {
                                                amount
                                                currencyCode
                                            }
                                        }
                                    }
                                }
                                pageInfo{
                                    endCursor
                                    hasNextPage
                                }
                            }
                        }
                    }
                }
                </@compress>]]>
            </fileData>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="ExchangeLineItemByIdQuery.ftl" isFile="Y" resourceId="ExchangeLineItemByIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query{
                    node(id: "${returnId}"){
                        id
                        ... on
                        Return{
                            id
                            exchangeLineItems (first: 5<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                edges{
                                    node{
                                        id
                                        lineItem {
                                            id
                                            quantity
                                            sku
                                            variantTitle
                                            product {
                                                id
                                                title
                                            }
                                        }
                                    }
                                }
                                pageInfo{
                                    endCursor
                                    hasNextPage
                                }
                            }
                        }
                    }
                }
                </@compress>]]>
            </fileData>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="ReturnsByOrderIDQuery.ftl" isFile="Y" resourceId="ReturnsByOrderIdQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query{
                    node(id: "${shopifyOrderId}") {
                        id
                        ... on
                        Order {
                            id
                            name
                            returns (first: 5<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                edges {
                                    node {
                                        id
                                    }
                                }
                                pageInfo{
                                    endCursor
                                    hasNextPage
                                }
                            }
                        }
                    }
                }
                </@compress>]]>
            </fileData>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="FulfillmentOrdersByOrderIdQuery.ftl" isFile="Y" resourceId="FulfillmentOrdersByOrderIdQuery"
                               parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query{
                    node(id: "${shopifyOrderId}") {
                        id
                        ... on
                        Order {
                            id
                            name
                            fulfillmentOrders (first: 5<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                edges {
                                    node {
                                        id
                                    }
                                }
                                pageInfo{
                                    endCursor
                                    hasNextPage
                                }
                            }
                        }
                    }
                }
                </@compress>]]>
            </fileData>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="FulfillmentOrderHeaderByIdQuery.ftl" isFile="Y" resourceId="FulfillmentOrderHeaderByIdQuery" parentResourceId="GraphQl">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query{
                    node(id: "${fulfillmentOrderId}") {
                        id
                        ... on
                        FulfillmentOrder {
                            id
                            status
                            updatedAt
                            fulfillAt
                            channelId
                            assignedLocation {
                                location {
                                    id
                                }
                            }
                        }
                    }
                }
                </@compress>]]>
            </fileData>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="FulfillmentOrderLineItemsByIdQuery.ftl" isFile="Y" resourceId="FulfillmentOrderLineItemsByIdQuery" parentResourceId="GraphQl">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                query{
                    node(id: "${fulfillmentOrderId}") {
                        id
                        ... on
                        FulfillmentOrder {
                            id
                            lineItems (first : 5<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                edges{
                                    node {
                                        id
                                        sku
                                        variantTitle
                                        productTitle
                                    }
                                }
                                pageInfo{
                                    endCursor
                                    hasNextPage
                                }
                            }
                        }
                    }
                }
                </@compress>]]>
            </fileData>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="ReturnedOrderIdsQuery.ftl" isFile="Y" resourceId="ReturnedOrderIdsQuery" parentResourceId="GraphQl">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[
                    <#ftl output_format="HTML">
                    <@compress single_line=true>
                        <#if queryParams.fromDate?has_content && !queryParams.thruDate?has_content>
                            <#assign filterQuery = "updated_at:>'${queryParams.fromDate}' AND return_status:'RETURNED'"/>
                        </#if>
                        <#if queryParams.thruDate?has_content && !queryParams.fromDate?has_content>
                            <#assign filterQuery = "updated_at:<'${queryParams.thruDate}' AND return_status:'RETURNED'"/>
                        </#if>
                        <#if queryParams.fromDate?has_content && queryParams.thruDate?has_content>
                            <#assign filterQuery = "updated_at:>'${queryParams.fromDate}' AND updated_at:<'${queryParams.thruDate}' AND return_status:'RETURNED'"/>
                        </#if>
                        <#if !filterQuery?has_content>
                            <#assign filterQuery = "return_status:'RETURNED'"/>
                        </#if>
                        query {
                            orders (first: 100<#if filterQuery?has_content>, query: "${filterQuery}")</#if> {
                                edges {
                                    node {
                                        id
                                        name
                                        returnStatus
                                    }
                                }
                                pageInfo {
                                    endCursor
                                    hasNextPage
                                }
                            }
                        }
                    </@compress>
                ]]>
            </fileData>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="BulkCreateGiftCards.ftl" isFile="Y" resourceId="BulkCreateGiftCards" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                    mutation {
                        bulkOperationRunMutation(
                            mutation: "mutation call($input: GiftCardCreateInput!) {
                                giftCardCreate(input: $input) {
                                    giftCard {
                                        id
                                        initialValue {
                                            amount
                                        }
                                        expiresOn
                                    }
                                    giftCardCode
                                    userErrors {
                                        field
                                        message
                                    }
                                }
                            }",
                        stagedUploadPath: "${stagedUploadPath}") {
                            bulkOperation {
                                id
                                url
                                status
                            }
                            userErrors {
                                message
                                field
                            }
                        }
                    }
                </@compress>]]>
            </fileData>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="BulkOperationResultQuery.ftl" isFile="Y" resourceId="BulkOperationResultQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                    query ($id: ID!) {
                        node(id: $id) { ...
                            on BulkOperation {
                                id
                                status
                                errorCode
                                createdAt
                                completedAt
                                objectCount
                                fileSize
                                url
                                partialDataUrl
                            }
                        }
                    }
                </@compress>]]>
            </fileData>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="BulkOrderCustomAttributesQuery.ftl" isFile="Y" resourceId="BulkOrderCustomAttributesQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                    <#if queryParams?has_content>
                        <#if queryParams.filterQuery?has_content>
                            <#assign filterQuery = queryParams.filterQuery/>
                        <#else>
                            <#if queryParams.fromDateLabel?has_content>
                                <#assign fromDateLabel = queryParams.fromDateLabel/>
                            <#else>
                                <#assign fromDateLabel = "created_at"/>
                            </#if>
                            <#if queryParams.thruDateLabel?has_content>
                                <#assign thruDateLabel = queryParams.thruDateLabel/>
                            <#else>
                                <#assign thruDateLabel = "created_at"/>
                            </#if>
                            <#if queryParams.fromDate?has_content && !queryParams.thruDate?has_content>
                                <#assign filterQuery = "${fromDateLabel}:>'${queryParams.fromDate}'"/>
                            </#if>
                            <#if queryParams.thruDate?has_content && !queryParams.fromDate?has_content>
                                <#assign filterQuery = "${thruDateLabel}:<'${queryParams.thruDate}'"/>
                            </#if>
                            <#if queryParams.fromDate?has_content && queryParams.thruDate?has_content>
                                <#assign filterQuery = "${fromDateLabel}:>'${queryParams.fromDate}' AND ${thruDateLabel}:<'${queryParams.thruDate}'"/>
                            </#if>
                        </#if>
                    </#if>

                    mutation {
                        bulkOperationRunQuery(
                            query: """ {
                                orders <#if filterQuery?has_content>(query:"${filterQuery}")</#if> {
                                    edges {
                                        node {
                                            id
                                            name
                                            customAttributes {
                                                key
                                                value
                                            }
                                        }
                                    }
                                }
                            }
                        """ ) {
                            bulkOperation {
                                id
                                status
                            }
                            userErrors {
                                field
                                message
                            }
                        }
                    }
                </@compress>]]>
            </fileData>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="BulkOrderDiscountCodeApplQuery.ftl" isFile="Y" resourceId="BulkOrderDiscountCodeApplQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                    <#if queryParams?has_content>
                        <#if queryParams.filterQuery?has_content>
                            <#assign filterQuery = queryParams.filterQuery/>
                        <#else>
                            <#if queryParams.fromDateLabel?has_content>
                                <#assign fromDateLabel = queryParams.fromDateLabel/>
                            <#else>
                                <#assign fromDateLabel = "created_at"/>
                            </#if>
                            <#if queryParams.thruDateLabel?has_content>
                                <#assign thruDateLabel = queryParams.thruDateLabel/>
                            <#else>
                                <#assign thruDateLabel = "created_at"/>
                            </#if>
                            <#if queryParams.fromDate?has_content && !queryParams.thruDate?has_content>
                                <#assign filterQuery = "${fromDateLabel}:>'${queryParams.fromDate}'"/>
                            </#if>
                            <#if queryParams.thruDate?has_content && !queryParams.fromDate?has_content>
                                <#assign filterQuery = "${thruDateLabel}:<'${queryParams.thruDate}'"/>
                            </#if>
                            <#if queryParams.fromDate?has_content && queryParams.thruDate?has_content>
                                <#assign filterQuery = "${fromDateLabel}:>'${queryParams.fromDate}' AND ${thruDateLabel}:<'${queryParams.thruDate}'"/>
                            </#if>
                        </#if>
                    </#if>

                    mutation {
                        bulkOperationRunQuery(
                            query: """ {
                                orders <#if filterQuery?has_content>(query:"${filterQuery}")</#if> {
                                    edges {
                                        node {
                                            id
                                            name
                                            discountApplications {
                                               edges {
                                                     node {
                                                         ... on DiscountCodeApplication {
                                                             code
                                                             targetType
                                                             value {
                                                                 ... on MoneyV2 {
                                                                    amount
                                                                    currencyCode
                                                                }
                                                                ... on PricingPercentageValue {
                                                                    percentage
                                                                }
                                                            }
                                                        }
                                                     }
                                               }
                                            }
                                        }
                                    }
                                }
                            }
                        """ ) {
                            bulkOperation {
                                id
                                status
                            }
                            userErrors {
                                field
                                message
                            }
                        }
                    }
                </@compress>]]>
            </fileData>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="BulkOrderHeadersQuery.ftl" isFile="Y" resourceId="BulkOrderHeadersQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                    <#if queryParams?has_content>
                        <#if queryParams.filterQuery?has_content>
                            <#assign filterQuery = queryParams.filterQuery/>
                        <#else>
                            <#if queryParams.fromDateLabel?has_content>
                                <#assign fromDateLabel = queryParams.fromDateLabel/>
                            <#else>
                                <#assign fromDateLabel = "created_at"/>
                            </#if>
                            <#if queryParams.thruDateLabel?has_content>
                                <#assign thruDateLabel = queryParams.thruDateLabel/>
                            <#else>
                                <#assign thruDateLabel = "created_at"/>
                            </#if>
                            <#if queryParams.fromDate?has_content && !queryParams.thruDate?has_content>
                                <#assign filterQuery = "${fromDateLabel}:>'${queryParams.fromDate}'"/>
                            </#if>
                            <#if queryParams.thruDate?has_content && !queryParams.fromDate?has_content>
                                <#assign filterQuery = "${thruDateLabel}:<'${queryParams.thruDate}'"/>
                            </#if>
                            <#if queryParams.fromDate?has_content && queryParams.thruDate?has_content>
                                <#assign filterQuery = "${fromDateLabel}:>'${queryParams.fromDate}' AND ${thruDateLabel}:<'${queryParams.thruDate}'"/>
                            </#if>
                        </#if>
                    </#if>

                    mutation {
                        bulkOperationRunQuery(
                            query: """ {
                                orders <#if filterQuery?has_content>(query:"${filterQuery}")</#if> {
                                    edges {
                                        node {
                                            id
                                            name
                                            confirmed
                                            createdAt
                                            updatedAt
                                            cancelledAt
                                            closed
                                            closedAt
                                            processedAt
                                            subtotalLineItemsQuantity
                                            totalPriceSet {
                                                presentmentMoney {
                                                    amount
                                                    currencyCode
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        """ ) {
                            bulkOperation {
                                id
                                status
                            }
                            userErrors {
                                field
                                message
                            }
                        }
                    }
                </@compress>]]>
            </fileData>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="BulkOrderItemsQuery.ftl" isFile="Y" resourceId="BulkOrderItemsQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                    <#if queryParams?has_content>
                        <#if queryParams.filterQuery?has_content>
                            <#assign filterQuery = queryParams.filterQuery/>
                        <#else>
                            <#if queryParams.fromDateLabel?has_content>
                              <#assign fromDateLabel = queryParams.fromDateLabel/>
                            <#else>
                              <#assign fromDateLabel = "created_at"/>
                            </#if>
                            <#if queryParams.thruDateLabel?has_content>
                                <#assign thruDateLabel = queryParams.thruDateLabel/>
                            <#else>
                                <#assign thruDateLabel = "created_at"/>
                            </#if>
                            <#if queryParams.fromDate?has_content && !queryParams.thruDate?has_content>
                                <#assign filterQuery = "${fromDateLabel}:>'${queryParams.fromDate}'"/>
                            </#if>
                            <#if queryParams.thruDate?has_content && !queryParams.fromDate?has_content>
                                <#assign filterQuery = "${thruDateLabel}:<'${queryParams.thruDate}'"/>
                            </#if>
                            <#if queryParams.fromDate?has_content && queryParams.thruDate?has_content>
                                <#assign filterQuery = "${fromDateLabel}:>'${queryParams.fromDate}' AND ${thruDateLabel}:<'${queryParams.thruDate}'"/>
                            </#if>
                        </#if>
                    </#if>
                    mutation {
                        bulkOperationRunQuery(
                            query: """ {
                                orders<#if filterQuery?has_content>(query:"${filterQuery}")</#if> {
                                    edges {
                                        node {
                                            id
                                            name
                                            confirmed
                                            createdAt
                                            updatedAt
                                            processedAt
                                            cancelledAt
                                            closed
                                            closedAt
                                            subtotalLineItemsQuantity
                                            totalPriceSet {
                                                presentmentMoney {
                                                    amount
                                                    currencyCode
                                                }
                                                shopMoney {
                                                    amount
                                                    currencyCode
                                                }
                                            }
                                            currencyCode
                                            fulfillments {
                                                id
                                                status
                                            }
                                            refunds {
                                                id
                                            }
                                            lineItems {
                                                edges {
                                                    node {
                                                        id
                                                        title
                                                        quantity
                                                        currentQuantity
                                                        nonFulfillableQuantity
                                                        refundableQuantity
                                                        product {
                                                            id
                                                            isGiftCard
                                                            productType
                                                            tracksInventory
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        """ ) {
                            bulkOperation {
                                id
                                status
                            }
                            userErrors {
                                field
                                message
                            }
                        }
                    }
                </@compress>]]>
            </fileData>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="BulkOrderMetafieldsQuery.ftl" isFile="Y" resourceId="BulkOrderMetafieldsQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                    <#if queryParams?has_content>
                      <#if queryParams.filterQuery?has_content>
                        <#assign filterQuery = queryParams.filterQuery/>
                      <#else>
                          <#if queryParams.fromDateLabel?has_content>
                              <#assign fromDateLabel = queryParams.fromDateLabel/>
                          <#else>
                              <#assign fromDateLabel = "created_at"/>
                          </#if>
                          <#if queryParams.thruDateLabel?has_content>
                              <#assign thruDateLabel = queryParams.thruDateLabel/>
                          <#else>
                              <#assign thruDateLabel = "created_at"/>
                          </#if>
                          <#if queryParams.fromDate?has_content && !queryParams.thruDate?has_content>
                              <#assign filterQuery = "${fromDateLabel}:>'${queryParams.fromDate}'"/>
                          </#if>
                          <#if queryParams.thruDate?has_content && !queryParams.fromDate?has_content>
                              <#assign filterQuery = "${thruDateLabel}:<'${queryParams.thruDate}'"/>
                          </#if>
                          <#if queryParams.fromDate?has_content && queryParams.thruDate?has_content>
                              <#assign filterQuery = "${fromDateLabel}:>'${queryParams.fromDate}' AND ${thruDateLabel}:<'${queryParams.thruDate}'"/>
                          </#if>
                      </#if>
                    </#if>

                    mutation {
                        bulkOperationRunQuery(
                            query: """ {
                                orders <#if filterQuery?has_content>(query:"${filterQuery}")</#if> {
                                    edges {
                                        node {
                                            id
                                            <#-- Added below check to request only specific metafields from Shopify based on given namespace list   -->
                                            <#if queryParams?has_content && queryParams.namespaces?has_content>
                                                <#assign namespaceList = queryParams.namespaces.split(",")!/>
                                                <#list namespaceList as namespace>
                                                   metafield${namespace_index + 1}: metafields (<#if namespace?has_content>namespace: "${namespace}"</#if>) {
                                                       edges {
                                                           node {
                                                               id
                                                               key
                                                               namespace
                                                               value
                                                               type
                                                           }
                                                       }
                                                   }
                                                </#list>
                                            </#if>
                                        }
                                    }
                                }
                            }
                        """ ) {
                            bulkOperation {
                                id
                                status
                            }
                            userErrors {
                                field
                                message
                            }
                        }
                    }
                </@compress>]]>
            </fileData>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="BulkUpdateProductTags.ftl" isFile="Y" resourceId="BulkUpdateProductTags" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                    mutation {
                        bulkOperationRunMutation(
                            mutation: "mutation call($input: ProductInput!) {
                                productUpdate(input: $input) {
                                    product {
                                        id
                                        tags
                                    }
                                    userErrors {
                                        message
                                        field
                                    }
                                }
                            }",
                        stagedUploadPath: "${stagedUploadPath}") {
                            bulkOperation {
                                id
                                url
                                status
                            }
                            userErrors {
                                message
                                field
                            }
                        }
                    }
                </@compress>]]>
            </fileData>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="BulkUpdateProductVariants.ftl" isFile="Y" resourceId="BulkUpdateProductVariants" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                    mutation {
                        bulkOperationRunMutation(
                            mutation: "mutation call($input: ProductVariantInput!) {
                                productVariantUpdate(input: $input) {
                                    productVariant {
                                        id
                                        <#if namespaces?has_content>
                                            <#assign namespaceList = StringUtil.split(namespaces, ",")!/>
                                            <#list namespaceList as namespace>
                                                metafield${namespace_index+1}:metafields(namespace:\"${namespace}\" first:10) {
                                                    edges {
                                                        node {
                                                            id
                                                            key
                                                            namespace
                                                            value
                                                            type
                                                        }
                                                    }
                                                }
                                            </#list>
                                        </#if>
                                    }
                                    userErrors {
                                        message
                                        field
                                    }
                                }
                            }",
                            stagedUploadPath: "${stagedUploadPath}") {
                                bulkOperation {
                                id
                                url
                                status
                            }
                            userErrors {
                                message
                                field
                            }
                        }
                    }
                </@compress>]]>
            </fileData>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="BulkVariantsMetafieldQuery.ftl" isFile="Y" resourceId="BulkVariantsMetafieldQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                    mutation {
                        bulkOperationRunQuery(
                            query: """ {
                            productVariants <#if queryParams?has_content && queryParams.filterQuery?has_content>(query:"${queryParams.filterQuery}")</#if> {
                                edges {
                                    node {
                                        id
                                        <#-- Added below check to request only specific metafields from Shopify based on given namespace list   -->
                                        <#if queryParams?has_content && queryParams.namespaces?has_content>
                                            <#assign namespaceList = queryParams.namespaces.split(",")!/>
                                            <#list namespaceList as namespace>
                                                metafield${namespace_index + 1}: metafields (<#if namespace?has_content>namespace: "${namespace}"</#if>) {
                                                    edges {
                                                        node {
                                                            id
                                                            key
                                                            namespace
                                                            value
                                                            type
                                                        }
                                                    }
                                                }
                                            </#list>
                                        </#if>
                                    }
                                }
                            }
                        }
                        """ ) {
                            bulkOperation {
                                id
                                status
                            }
                            userErrors {
                                field
                                message
                            }
                        }
                    }
                </@compress>]]>
            </fileData>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="OrderMetafieldsQuery.ftl" isFile="Y" resourceId="OrderMetafieldsQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                    query {
                        node(id: "${shopifyOrderId}") {
                            id
                            ... on
                            Order {
                                id
                                name
                                metafields (first: 10
                                    <#if namespace?has_content>, namespace: "${namespace}"</#if>
                                    <#if cursor?has_content>, after: "${cursor}"</#if>) {
                                    edges {
                                        node {
                                            id
                                            key
                                            namespace
                                            value
                                            type
                                        }
                                    }
                                    pageInfo {
                                        endCursor
                                        hasNextPage
                                    }
                                }
                            }
                        }
                    }
                </@compress>]]>
            </fileData>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="RefundLineItemsQuery.ftl" isFile="Y" resourceId="RefundLineItemsQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                    query {
                        node(id: "${shopifyRefundId}") {
                            id
                            ... on
                            Refund {
                                id
                                order {
                                    id
                                }
                                createdAt
                                note
                                refundLineItems (first : 3<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                    edges {
                                        node {
                                            lineItem {
                                                id
                                            }
                                            location {
                                                id
                                            }
                                            restockType
                                            quantity
                                            totalTaxSet {
                                                presentmentMoney {
                                                    amount
                                                    currencyCode
                                                }
                                            }
                                            subtotalSet {
                                                presentmentMoney {
                                                    amount
                                                    currencyCode
                                                }
                                            }
                                        }
                                    }
                                    pageInfo {
                                        hasNextPage
                                        endCursor
                                    }
                                }
                            }
                        }
                    }
                </@compress>]]>
            </fileData>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="RefundTransactionsQuery.ftl" isFile="Y" resourceId="RefundTransactionsQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                    query {
                        node(id: "${shopifyRefundId}") {
                            id
                            ... on
                            Refund {
                                id
                                order {
                                    id
                                }
                                transactions (first : 5) {
                                    edges {
                                        node {
                                            status
                                            amountSet {
                                                presentmentMoney {
                                                    amount
                                                    currencyCode
                                                }
                                            }
                                            gateway
                                            paymentDetails {
                                                __typename
                                                ... on CardPaymentDetails {
                                                    company
                                                }
                                            }
                                        }
                                    }
                                    pageInfo {
                                        endCursor
                                        hasNextPage
                                    }
                                }
                            }
                        }
                    }
                </@compress>]]>
            </fileData>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="ReturnLineItemsByRefundQuery.ftl" isFile="Y" resourceId="ReturnLineItemsByRefundQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                    query {
                        node(id: "${shopifyRefundId}") {
                            id
                            ... on
                            Refund {
                                id
                                order {
                                    id
                                }
                                return {
                                    id
                                    returnLineItems (first : 3<#if cursor?has_content>, after: "${cursor}"</#if>) {
                                        edges {
                                            node {
                                                fulfillmentLineItem {
                                                    lineItem {
                                                        id
                                                    }
                                                }
                                                returnReason
                                                returnReasonNote
                                                customerNote
                                            }
                                        }
                                        pageInfo {
                                            hasNextPage
                                            endCursor
                                        }
                                    }
                                }
                            }
                        }
                    }
                </@compress>]]>
            </fileData>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="StagedUploadsCreate.ftl" isFile="Y" resourceId="StagedUploadsCreate" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                    mutation stagedUploadsCreate($input: [StagedUploadInput!]!) {
                        stagedUploadsCreate(input: $input) {
                            stagedTargets  {
                                url,
                                resourceUrl,
                                parameters {
                                    name,
                                    value
                                }
                            }
                            userErrors {
                                field
                                message
                            }
                        }
                    }
                </@compress>]]>
            </fileData>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="WebhookSubscriptionCreate.ftl" isFile="Y" resourceId="WebhookSubscriptionCreate" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                    mutation {
                        webhookSubscriptionCreate(
                            topic: ${topic}
                            webhookSubscription: {
                                format: JSON,
                                callbackUrl: "${endPoint}"}
                        ) {
                            userErrors {
                                field
                                message
                            }
                            webhookSubscription {
                                id
                            }
                        }
                    }
                </@compress>]]>
            </fileData>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="WebhookSubscriptionDelete.ftl" isFile="Y" resourceId="WebhookSubscriptionDelete" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                    mutation webhookSubscriptionDelete($id: ID!) {
                        webhookSubscriptionDelete(id: $id) {
                            deletedWebhookSubscriptionId
                            userErrors {
                                field
                                message
                            }
                        }
                    }
                </@compress>]]>
            </fileData>
        </file>
    </moqui.resource.DbResource>
    <moqui.resource.DbResource filename="WebhookSubscriptionsQuery.ftl" isFile="Y" resourceId="WebhookSubscriptionsQuery" parentResourceId="GraphQL">
        <file mimeType="text/html" versionName="01" rootVersionName="01">
            <fileData>
                <![CDATA[<#ftl output_format="HTML">
                <@compress single_line=true>
                    query {
                        webhookSubscriptions(first: 1
                            <#if queryParams?has_content && queryParams.topics?has_content>, topics: ${queryParams.topics}</#if>
                            <#if queryParams?has_content && queryParams.callbackUrl?has_content>, callbackUrl: "${queryParams.callbackUrl}"</#if>) {
                            edges {
                                node {
                                    id
                                    topic
                                    endpoint {
                                        __typename
                                        ... on WebhookHttpEndpoint {
                                            callbackUrl
                                        }
                                    }
                               }
                            }
                        }
                    }
                </@compress>]]>
            </fileData>
        </file>
    </moqui.resource.DbResource>

    <!-- SystemMessageType record for generating Returned Order Ids Feed -->
    <moqui.service.message.SystemMessageType systemMessageTypeId="GenerateReturnedOrderIdsFeed"
            description="Generate Returned Order Ids Feed"
            sendPath="dbresource://shopify/template/graphQL/ReturnedOrderIdsQuery.ftl"
            sendServiceName="co.hotwax.shopify.system.ShopifySystemMessageServices.generate#ReturnedOrderIdsFeed"
            receivePath="${contentRoot}/shopify/ReturnedOrderIdsFeed/ReturnedOrderIdsFeed-${systemMessageId}-${dateTime}.json">
    </moqui.service.message.SystemMessageType>

    <!-- SystemMessageType record for generating Returns and Exchange Feed -->
    <moqui.service.message.SystemMessageType systemMessageTypeId="GenerateReturnsAndExchangeFeed"
            description="Generate Returns and Exchange Feed"
            parentTypeId="LocalFeedFile"
            sendPath="${contentRoot}/shopify/ReturnsAndExchangeFeed/ReturnsAndExchangeFeed-${systemMessageId}-${dateTime}.json"
            consumeServiceName="co.hotwax.shopify.system.ShopifySystemMessageServices.generate#ReturnsAndExchangeFeed">
        <parameters parameterName="sendSmrId" parameterValue="" systemMessageRemoteId=""/>
    </moqui.service.message.SystemMessageType>

    <moqui.service.message.SystemMessageType systemMessageTypeId="SendReturnsAndExchangeFeed"
            description="Send Returns and Exchange Feed"
            parentTypeId="LocalFeedFile"
            sendServiceName="co.hotwax.ofbiz.SystemMessageServices.send#SystemMessageFileSftp"
            sendPath="">
    </moqui.service.message.SystemMessageType>

    <!-- Enumeration to create relation between GenerateReturnedOrderIdsFeed, GenerateReturnsAndExchangeFeed and SendReturnsAndExchangeFeed SystemMessageType(s) -->
    <moqui.basic.Enumeration description="Send Returns And Exchange Feed" enumId="SendReturnsAndExchangeFeed" enumTypeId="ShopifyMessageTypeEnum"/>
    <moqui.basic.Enumeration description="Generate Returns And Exchange Feed" enumId="GenerateReturnsAndExchangeFeed" enumTypeId="ShopifyMessageTypeEnum" relatedEnumId="SendReturnsAndExchangeFeed" relatedEnumTypeId="ShopifyMessageTypeEnum"/>
    <moqui.basic.Enumeration description="Generate Returned Order Ids Feed" enumId="GenerateReturnedOrderIdsFeed" enumTypeId="ShopifyMessageTypeEnum" relatedEnumId="GenerateReturnsAndExchangeFeed" relatedEnumTypeId="ShopifyMessageTypeEnum"/>

    <!--Migrate GraphQL templates to DbResource -->
    <moqui.service.message.SystemMessageType systemMessageTypeId="BulkUpdateProductTags"
            sendPath="dbresource://shopify/template/graphQL/BulkUpdateProductTags.ftl">
    </moqui.service.message.SystemMessageType>

    <moqui.service.message.SystemMessageType systemMessageTypeId="BulkUpdateProductVariants"
            sendPath="dbresource://shopify/template/graphQL/BulkUpdateProductVariants.ftl">
    </moqui.service.message.SystemMessageType>

    <moqui.service.message.SystemMessageType systemMessageTypeId="BulkCreateGiftCards"
            sendPath="dbresource://shopify/template/graphQL/BulkCreateGiftCards.ftl">
    </moqui.service.message.SystemMessageType>

    <moqui.service.message.SystemMessageType systemMessageTypeId="BulkVariantsMetafieldQuery"
            sendPath="dbresource://shopify/template/graphQL/BulkVariantsMetafieldQuery.ftl">
    </moqui.service.message.SystemMessageType>

    <moqui.service.message.SystemMessageType systemMessageTypeId="BulkOrderMetafieldsQuery"
            sendPath="dbresource://shopify/template/graphQL/BulkOrderMetafieldsQuery.ftl">
    </moqui.service.message.SystemMessageType>

    <moqui.service.message.SystemMessageType systemMessageTypeId="BulkOrderHeadersQuery"
            sendPath="dbresource://shopify/template/graphQL/BulkOrderHeadersQuery.ftl">
    </moqui.service.message.SystemMessageType>

    <moqui.service.message.SystemMessageType systemMessageTypeId="BulkOrderItemsQuery"
            sendPath="dbresource://shopify/template/graphQL/BulkOrderItemsQuery.ftl">
    </moqui.service.message.SystemMessageType>

    <moqui.service.message.SystemMessageType systemMessageTypeId="BulkOrderCustomAttributesQuery"
            sendPath="dbresource://shopify/template/graphQL/BulkOrderCustomAttributesQuery.ftl">
    </moqui.service.message.SystemMessageType>

    <moqui.service.message.SystemMessageType systemMessageTypeId="DeleteWebhookSubscription"
            sendPath="dbresource://shopify/template/graphQL/WebhookSubscriptionDelete.ftl">
    </moqui.service.message.SystemMessageType>

    <moqui.service.message.SystemMessageType systemMessageTypeId="BulkOperationsFinish"
            sendPath="dbresource://shopify/template/graphQL/WebhookSubscriptionCreate.ftl">
    </moqui.service.message.SystemMessageType>

    <moqui.service.message.SystemMessageType systemMessageTypeId="OrdersUpdated"
            sendPath="dbresource://shopify/template/graphQL/WebhookSubscriptionCreate.ftl">
    </moqui.service.message.SystemMessageType>

    <moqui.service.message.SystemMessageType systemMessageTypeId="BulkOrderDiscountCodeApplQuery"
            sendPath="dbresource://shopify/template/graphQL/BulkOrderDiscountCodeApplQuery.ftl">
    </moqui.service.message.SystemMessageType>
</entity-facade-xml>