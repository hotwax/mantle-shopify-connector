<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://moqui.org/xsd/service-definition-3.xsd">
    <service verb="get" noun="OrderCount" authenticate="anonymous-all">
        <description>Get Shopify Order Count on given parameters</description>
        <in-parameters>
            <parameter name="systemMessageRemoteId" required="true"/>
            <parameter name="createdFromDate"/>
            <parameter name="createdThruDate"/>
            <parameter name="updatedFromDate"/>
            <parameter name="updatedThruDate"/>
            <parameter name="status" default-value="any"/>
            <parameter name="financialStatus"/>
            <parameter name="fulfilmentStatus"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderCount"/>
        </out-parameters>
        <actions>
            <script>
                queryString = new StringBuffer()
                queryString.append("status=").append(status)
                if (createdFromDate) queryString.append("&amp;&amp;created_at_min=").append(ZonedDateTime.ofInstant(Timestamp.valueOf(createdFromDate).toInstant(), ZoneId.of("UTC")).toString())
                if (createdThruDate) queryString.append("&amp;&amp;created_at_max=").append(ZonedDateTime.ofInstant(Timestamp.valueOf(createdThruDate).toInstant(), ZoneId.of("UTC")).toString())
                if (updatedFromDate) queryString.append("&amp;&amp;updated_at_min=").append(ZonedDateTime.ofInstant(Timestamp.valueOf(updatedFromDate).toInstant(), ZoneId.of("UTC")).toString())
                if (updatedThruDate) queryString.append("&amp;&amp;updated_at_max=").append(ZonedDateTime.ofInstant(Timestamp.valueOf(updatedThruDate).toInstant(), ZoneId.of("UTC")).toString())
                if (financialStatus) queryString.append("&amp;&amp;financial_status=").append(financialStatus)
                if (fulfilmentStatus) queryString.append("&amp;&amp;fulfillment_status=").append(fulfilmentStatus)
            </script>
            <set field="endPoint" value="orders/count.json?${queryString}"/>
            <service-call name="co.hotwax.shopify.common.ShopifyHelperServices.send#ShopifyRequest" in-map="[systemMessageRemoteId:systemMessageRemoteId, endPoint:endPoint,
                        requestType:'GET', contentType:'application/json']" out-map="orderCountResponse"/>

            <if condition="orderCountResponse.statusCode != 200">
                <return error="true" message="System message from SystemMessageRemote with ID
                    ${systemMessageRemoteId} sent error response ${orderCountResponse.statusCode}: ${orderCountResponse.response}"/>
            </if>

            <set field="orderCount" from="orderCountResponse.response.count"/>
        </actions>
    </service>
    <service verb="send" noun="OrderUpdatedAtToQueue" authenticate="anonymous-all">
        <implements service="org.moqui.impl.SystemMessageServices.send#SystemMessage"/>
        <actions>
            <entity-find-one entity-name="moqui.service.message.SystemMessageAndType" value-field="systemMessage">
                <field-map field-name="systemMessageId"/>
            </entity-find-one>
            <set field="order" from="org.moqui.impl.context.ContextJavaUtil.jacksonMapper.readValue(systemMessage.messageText, Map.class)"/>
            <set field="messageMap" from="[shopifyOrderId:order.id, shopifyOrderGraphqlId:order.admin_graphql_api_id, updatedAt:order.updated_at]"/>
            <set field="messageText" from="org.moqui.impl.context.ContextJavaUtil.jacksonMapper.writeValueAsString(messageMap)"/>
            <service-call name="moqui.aws.SqsServices.send#Message" in-map="[queueUrl:systemMessage.sendPath, messageText:messageText]" out-map="context"/>
        </actions>
    </service>
    <service verb="get" noun="OrderMetafields" authenticate="anonymous-all">
        <description>Get metafields for a given shopify orderId and namespace (optional).</description>
        <in-parameters>
            <parameter name="systemMessageRemoteId" required="true"/>
            <parameter name="shopifyOrderId" required="true"/>
            <parameter name="namespace"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderMetafields" type="List"/>
        </out-parameters>
        <actions>
            <set field="hasNextPage" type="Boolean" value="true"/>
            <set field="orderMetafields" from="[]"/>
            <while condition="hasNextPage">
                <script>
                    StringWriter sw = new StringWriter()
                    ec.resource.ftlTemplateRenderer.render("dbresource://shopify/template/graphQL/OrderMetafieldsQuery.ftl", sw)
                    queryText = sw.toString()
                    ec.logger.info ("queryText" + queryText)
                    try {
                        sw.close()
                    } catch (IOException e) {
                        ec.logger.error("Error closing StringWriter")
                    }
                </script>
                <service-call name="co.hotwax.shopify.common.ShopifyHelperServices.send#ShopifyGraphqlRequest" in-map="[systemMessageRemoteId:systemMessageRemoteId, queryText:queryText]" out-map="orderMetafieldsResponse"/>
                <if condition="!orderMetafieldsResponse.response.node">
                    <return type="warning" message="No Shopify order found for id: ${shopifyOrderId}"/>
                </if>
                <if condition="orderMetafieldsResponse.response.node.metafields.edges">
                    <script>orderMetafields.addAll(orderMetafieldsResponse.response.node.metafields.edges)</script>
                </if>
                <set field="hasNextPage" from="orderMetafieldsResponse.response.node.metafields.pageInfo.hasNextPage"/>
                <set field="cursor" from="orderMetafieldsResponse.response.node.metafields.pageInfo.endCursor"/>
            </while>
        </actions>
    </service>
    <service verb="get" noun="OrderDetails">
        <description>Get order details for a given shopify orderId</description>
        <in-parameters>
            <parameter name="systemMessageRemoteId" required="true"/>
            <parameter name="shopifyOrderId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderDetail"/>
        </out-parameters>
        <actions>
            <script>
                StringWriter sw = new StringWriter()
                ec.resource.ftlTemplateRenderer.render("dbresource://shopify/template/graphQL/OrderHeaderByIdQuery.ftl", sw)
                queryText = sw.toString()
                ec.logger.info ("queryText" + queryText)
                try {
                    sw.close()
                } catch (IOException e) {
                    ec.logger.error("Error closing StringWriter")
                }
            </script>
            <service-call name="co.hotwax.shopify.common.ShopifyHelperServices.send#ShopifyGraphqlRequest" in-map="[systemMessageRemoteId:systemMessageRemoteId, queryText:queryText]" out-map="orderHeaderResponse"/>
            <if condition="!orderHeaderResponse.response.node">
                <return type="warning" message="No Shopify order found for id: ${shopifyOrderId}"/>
            </if>
            <set field="hasNextPage" type="Boolean" value="true"/>
            <set field="orderLineItems" from="[]"/>
            <while condition="hasNextPage">
                <script>
                    StringWriter sw1 = new StringWriter()
                    ec.resource.ftlTemplateRenderer.render("dbresource://shopify/template/graphQL/OrderLineItemByIdQuery.ftl", sw1)
                    queryText = sw1.toString()
                    ec.logger.info ("queryText" + queryText)
                    try {
                        sw1.close()
                    } catch (IOException e) {
                        ec.logger.error("Error closing StringWriter")
                    }
                </script>
                <service-call name="co.hotwax.shopify.common.ShopifyHelperServices.send#ShopifyGraphqlRequest" in-map="[systemMessageRemoteId:systemMessageRemoteId, queryText:queryText]" out-map="orderLineItemResponse"/>
                <if condition="orderLineItemResponse.response.node.lineItems.edges">
                    <script>orderLineItems.addAll(orderLineItemResponse.response.node.lineItems.edges.node)</script>
                </if>
                <set field="hasNextPage" from="orderLineItemResponse.response.node.lineItems.pageInfo.hasNextPage"/>
                <set field="cursor" from="orderLineItemResponse.response.node.lineItems.pageInfo.endCursor"/>
            </while>
            <set field="orderDetail" from="orderHeaderResponse.response.node"/>
            <set field="orderDetail.lineItems" from="orderLineItems"/>
        </actions>
    </service>
</services>
