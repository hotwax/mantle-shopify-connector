<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://moqui.org/xsd/service-definition-3.xsd">
    <service verb="get" noun="FulfillmentOrders" authenticate="anonymous-all">
        <description>
            Get Fulfillment Orders for a given shopifyOrderId.
        </description>
        <in-parameters>
            <parameter name="shopifyOrderId" required="true"/>
            <parameter name="systemMessageRemoteId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="fulfillmentOrders" type="List" required="true"/>
        </out-parameters>
        <actions>
            <set field="endPoint" value="orders/${shopifyOrderId}/fulfillment_orders.json"/>
            <service-call name="co.hotwax.shopify.common.ShopifyHelperServices.send#ShopifyRequest" in-map="[systemMessageRemoteId:systemMessageRemoteId, endPoint:endPoint,
                        requestType:'GET', contentType:'application/json']" out-map="fulfillmentOrderResponse"/>

            <if condition="fulfillmentOrderResponse.statusCode != 200">
                <return error="true" message="System message from SystemMessageRemote with ID
                    ${systemMessageRemoteId} sent error response ${fulfillmentOrderResponse.statusCode}: ${fulfillmentOrderResponse.response}"/>
            </if>

            <set field="fulfillmentOrders" from="fulfillmentOrderResponse.response.fulfillment_orders"/>
        </actions>
    </service>

    <service verb="create" noun="Fulfillment" authenticate="anonymous-all">
        <description>
            Create a shopify fulfillment for given shopify line items and tracking number.
        </description>
        <in-parameters>
            <parameter name="systemMessageRemoteId" required="true"/>
            <parameter name="shopifyOrderId" required="true"/>
            <parameter name="lineItems" required="true" type="List">
                <parameter name="shopifyLineItemId" required="true"/>
                <parameter name="quantity" required="true"/>
            </parameter>
            <parameter name="trackingNumber"/>
            <parameter name="trackingUrl"/>
            <parameter name="carrier"/>
            <parameter name="notifyCustomer" type="Boolean" default-value="false"/>
        </in-parameters>
        <out-parameters>
            <parameter name="shopifyFulfillmentId"/>
        </out-parameters>
        <actions>
            <service-call name="co.hotwax.shopify.fulfillment.ShopifyFulfillmentServices.get#FulfillmentOrders" in-map="[shopifyOrderId:shopifyOrderId, systemMessageRemoteId:systemMessageRemoteId]" out-map="context"/>

            <set field="aggregatedLineItemMap" from="[:]"/>
            <iterate list="lineItems" entry="lineItem">
                <if condition="aggregatedLineItemMap.get(lineItem.shopifyLineItemId) == null">
                    <then>
                        <script>aggregatedLineItemMap.put(lineItem.shopifyLineItemId, lineItem.quantity)</script>
                    </then>
                    <else>
                        <script>aggregatedLineItemMap.put(lineItem.shopifyLineItemId, aggregatedLineItemMap.get(lineItem.shopifyLineItemId) + lineItem.quantity)</script>
                    </else>
                </if>
            </iterate>

            <set field="lineItemsMapById" from="[:]"/>
            <iterate list="fulfillmentOrders" entry="fulfillmentOrder">
                <set field="fulfillmentOrderLineItems" from="fulfillmentOrder.line_items"/>
                <iterate list="fulfillmentOrderLineItems" entry="fulfillmentOrderLineItem">
                    <set field="lineItemId" from="fulfillmentOrderLineItem.line_item_id" type="String"/>
                    <script>lineItemsMapById.put(lineItemId, fulfillmentOrderLineItem)</script>
                </iterate>
            </iterate>

            <set field="fulfillmentItemsByFulfillmentOrderId" from="[:]"/>
            <iterate list="aggregatedLineItemMap" entry="quantity" key="shopifyLineItemId">
                <set field="lineItemMap" from="lineItemsMapById.get(shopifyLineItemId)"/>
                <script>
                    org.moqui.util.CollectionUtilities.addToListInMap(lineItemMap.fulfillment_order_id, ["id": lineItemMap.id, "quantity": quantity], fulfillmentItemsByFulfillmentOrderId)
                </script>
            </iterate>

            <set field="lineItemsByFulfillmentOrder" from="[]"/>
            <iterate list="fulfillmentItemsByFulfillmentOrderId" entry="lineItems" key="fulfillmentOrderId">
                <script>lineItemsByFulfillmentOrder.add(["fulfillment_order_id": fulfillmentOrderId, "fulfillment_order_line_items": lineItems])</script>
            </iterate>

            <set field="requestBody" from="['fulfillment':['line_items_by_fulfillment_order':lineItemsByFulfillmentOrder, 'notify_customer':notifyCustomer, 'tracking_info':['number': trackingNumber, 'company': carrier, 'url': trackingUrl]]]"/>
            <service-call name="co.hotwax.shopify.common.ShopifyHelperServices.send#ShopifyRequest" in-map="[systemMessageRemoteId:systemMessageRemoteId, endPoint:'fulfillments.json',
                        requestType:'POST', contentType:'application/json', requestBody:requestBody]" out-map="createFulfillmentResponse"/>

            <if condition="createFulfillmentResponse.statusCode != 201">
                <return error="true" message="System message from SystemMessageRemote with ID
                    ${systemMessageRemoteId} sent error response ${createFulfillmentResponse.statusCode}: ${createFulfillmentResponse.response} for shopifyOrderId ${shopifyOrderId}"/>
            </if>

            <set field="shopifyFulfillmentId" from="createFulfillmentResponse.response.fulfillment.id"/>
        </actions>
    </service>
    <service verb="generate" noun="ShopifyFulfillmentAckFeed" authenticate="anonymous-all" transaction-timeout="1800">
        <description>
            Service to generate shopify fulfillment acknowledgement from successfully sent System Messages
            of type "CreateShopifyFulfillment".
        </description>
        <in-parameters>
            <parameter name="sinceDate">
                <description>Parameter to fetch system messages updated after the specified date.</description>
            </parameter>
            <parameter name="jobName">
                <description>The name of the scheduled job to fetch the last run time for preparing the Feed.</description>
            </parameter>
            <parameter name="skipLastRunTimeUpdate" type="Boolean" default="false">
                <description>skip the LastRunTime update,mainly used while debugging</description>
            </parameter>
            <parameter name="systemMessageRemoteId" required="true">
                <description>The System Message Remote ID to send the feed.</description>
            </parameter>
        </in-parameters>
        <actions>
            <if condition="jobName &amp;&amp; !sinceDate">
                    <entity-find-one entity-name="moqui.service.job.ServiceJobParameter" value-field="lastRunParam">
                        <field-map field-name="jobName"/>
                        <field-map field-name="parameterName" value="lastRunTime"/>
                    </entity-find-one>
                    <set field="sinceDate" from="lastRunParam?.parameterValue"/>
            </if>
            <log message="Generating Shopify Fulfillment Ack Feed file since ${sinceDate}"/>

            <set field="nowDate" from="ec.user.nowTimestamp"/>
            <entity-find entity-name="moqui.service.message.SystemMessage" list="systemMessageList">
                <econdition field-name="systemMessageTypeId" operator="equals" value="CreateShopifyFulfillment"/>
                <econdition field-name="statusId" operator="equals" value="SmsgSent"/>
                <econdition field-name="processedDate" operator="greater" from="sinceDate" ignore-if-empty="true"/>
            </entity-find>

            <if condition="systemMessageList.isEmpty()">
                <return message="No eligible records for Shopify Fulfillment Ack Feed at ${nowDate}, not generating the Shopify Fulfillment Ack file."/>
            </if>

            <!-- Fetch the receivePath from SystemMessageType to prepare the path for creating the file in the receiving system. Ex: Moqui's datamanager directory in runtime for creating feeds.-->
            <entity-find-one entity-name="moqui.service.message.SystemMessageType" value-field="systemMessageType">
                <field-map field-name="systemMessageTypeId" value="SendShopifyFulfillmentAck"/>
            </entity-find-one>
            <if condition="systemMessageType == null"><return error="true" message="Could not find SystemMessageType with ID ${systemMessageTypeId}"/></if>

            <!-- Prepare Shopify Fulfillment Ack Feed File Path -->
            <!-- Using receivePath from SystemMessageType to prepare the jsonFilePathRef.-->
            <set field="jsonFilePathRef" from="ec.resource.expand(systemMessageType.receivePath, null,
            [contentRoot: ec.user.getPreference('mantle.content.root') ?: 'dbresource://datamanager', date:ec.l10n.format(nowDate, 'yyyy-MM-dd'),
            dateTime:ec.l10n.format(nowDate, 'yyyy-MM-dd-HH-mm-ss')], false)"/>
            <set field="jsonFilePath" from="ec.resource.getLocationReference(jsonFilePathRef).getUri().getPath()"/>

            <script>
                import com.fasterxml.jackson.core.JsonGenerator
                import com.fasterxml.jackson.core.JsonFactory
                import com.fasterxml.jackson.databind.ObjectMapper
                import java.nio.charset.StandardCharsets

                try {
                    //json file
                    File feedFile = new File(jsonFilePath)
                    if (!feedFile.parentFile.exists()) feedFile.parentFile.mkdirs()
                    JsonFactory jfactory = new JsonFactory()

                    /* Declaring the PrintWriter and JsonGenerator resources in the the try statement,
                        so that they are automatically closed regardless of whether the try statement completes normally or abruptly. */
                    try (PrintWriter pw = new PrintWriter(StandardCharsets.UTF_8, feedFile);
                         JsonGenerator jGenerator = jfactory.createGenerator(pw)) {
                        jGenerator.writeStartArray()
            </script>

            <iterate list="systemMessageList" entry="systemMessage">
                <set field="shipment" from="org.moqui.impl.context.ContextJavaUtil.jacksonMapper.readValue(systemMessage.messageText, Map.class)"/>
                <iterate list="shipment.shipmentItems" entry="shipmentItem">
                    <set field="shopifyFulfillmentAckMap" from="[shipmentId:shipmentItem.shipmentId, orderId:shipmentItem.orderId, orderItemSeqId: shipmentItem.orderItemSeqId, externalFulfillmentId: systemMessage.remoteMessageId]"/>
                    <script>
                        new ObjectMapper()
                        .setDateFormat(new java.text.SimpleDateFormat(System.getProperty('default_date_time_format')))
                        .writerWithDefaultPrettyPrinter().writeValue(jGenerator, shopifyFulfillmentAckMap)
                    </script>
                </iterate>
            </iterate>
            <script>
                        jGenerator.writeEndArray()
                    }
                } catch (IOException e) {
                    logger.error("Error preparing Shopify Fulfillment Ack Feed file", e)
                }
            </script>

            <service-call name="org.moqui.impl.SystemMessageServices.queue#SystemMessage"
                          in-map="[systemMessageTypeId:'SendShopifyFulfillmentAck',
                    systemMessageRemoteId:systemMessageRemoteId, messageText:jsonFilePathRef, remoteMessageId: jsonFilePathRef.substring(jsonFilePathRef.lastIndexOf('/')+1), sendNow:true]"
                          out-map="shopifyFulfillmentAckOut"/>

            <if condition="jobName &amp;&amp; !skipLastRunTimeUpdate">
                <!-- Set the current timestamp as the last run time for next run -->
                <service-call name="update#moqui.service.job.ServiceJobParameter"
                              in-map="[jobName:lastRunParam.jobName, parameterName:lastRunParam.parameterName,
                        parameterValue:nowDate]"/>
            </if>
            <return message="Created the Shopify Fulfillment Ack Feed file at time ${nowDate} with type SendShopifyFulfillmentAck and
                remote ${systemMessageRemoteId}, saved response in messages ${shopifyFulfillmentAckOut.systemMessageId}"/>
        </actions>
    </service>

    <service verb="generate" noun="ShopifyFulfillmentAckFeedV2" authenticate="anonymous-all" transaction-timeout="1800">
        <description>
            Service to generate shopify fulfillment acknowledgement from successfully sent System Messages
            of type "CreateShopifyFulfillment".
        </description>
        <in-parameters>
            <parameter name="sinceDate">
                <description>Parameter to fetch system messages updated after the specified date.</description>
            </parameter>
            <parameter name="jobName">
                <description>The name of the scheduled job to fetch the last run time for preparing the Feed.</description>
            </parameter>
            <parameter name="skipLastRunTimeUpdate" type="Boolean" default="false">
                <description>skip the LastRunTime update,mainly used while debugging</description>
            </parameter>
            <parameter name="systemMessageRemoteId" required="true">
                <description>The System Message Remote ID to send the feed.</description>
            </parameter>
        </in-parameters>
        <actions>
            <if condition="jobName &amp;&amp; !sinceDate">
                <entity-find-one entity-name="moqui.service.job.ServiceJobParameter" value-field="lastRunParam">
                    <field-map field-name="jobName"/>
                    <field-map field-name="parameterName" value="lastRunTime"/>
                </entity-find-one>
                <set field="sinceDate" from="lastRunParam?.parameterValue"/>
            </if>
            <log message="Generating Shopify Fulfillment Ack Feed file since ${sinceDate}"/>

            <set field="nowDate" from="ec.user.nowTimestamp"/>
            <entity-find entity-name="moqui.service.message.SystemMessage" list="systemMessageList">
                <econdition field-name="systemMessageTypeId" operator="equals" value="CreateShopifyFulfillment"/>
                <econdition field-name="statusId" operator="equals" value="SmsgSent"/>
                <econdition field-name="processedDate" operator="greater" from="sinceDate" ignore-if-empty="true"/>
            </entity-find>

            <if condition="systemMessageList.isEmpty()">
                <return message="No eligible records for Shopify Fulfillment Ack Feed at ${nowDate}, not generating the Shopify Fulfillment Ack file."/>
            </if>

            <!-- Fetch the receivePath from SystemMessageType to prepare the path for creating the file in the receiving system. Ex: Moqui's datamanager directory in runtime for creating feeds.-->
            <entity-find-one entity-name="moqui.service.message.SystemMessageType" value-field="systemMessageType">
                <field-map field-name="systemMessageTypeId" value="SendShopifyFulfillmentAck"/>
            </entity-find-one>
            <if condition="systemMessageType == null"><return error="true" message="Could not find SystemMessageType with ID ${systemMessageTypeId}"/></if>

            <!-- Prepare Shopify Fulfillment Ack Feed File Path -->
            <!-- Using receivePath from SystemMessageType to prepare the jsonFilePathRef.-->
            <set field="jsonFilePathRef" from="ec.resource.expand(systemMessageType.receivePath, null,
            [contentRoot: ec.user.getPreference('mantle.content.root') ?: 'dbresource://datamanager', date:ec.l10n.format(nowDate, 'yyyy-MM-dd'),
            dateTime:ec.l10n.format(nowDate, 'yyyy-MM-dd-HH-mm-ss')], false)"/>
            <set field="jsonFilePath" from="ec.resource.getLocationReference(jsonFilePathRef).getUri().getPath()"/>

            <script>
                import com.fasterxml.jackson.core.JsonGenerator
                import com.fasterxml.jackson.core.JsonFactory
                import com.fasterxml.jackson.databind.ObjectMapper
                import java.nio.charset.StandardCharsets

                try {
                    //json file
                    File feedFile = new File(jsonFilePath)
                    if (!feedFile.parentFile.exists()) feedFile.parentFile.mkdirs()
                    JsonFactory jfactory = new JsonFactory()

                    /* Declaring the PrintWriter and JsonGenerator resources in the the try statement,
                    so that they are automatically closed regardless of whether the try statement completes normally or abruptly. */
                    try (PrintWriter pw = new PrintWriter(StandardCharsets.UTF_8, feedFile);
                        JsonGenerator jGenerator = jfactory.createGenerator(pw)) {
                        jGenerator.writeStartArray()
            </script>

            <iterate list="systemMessageList" entry="systemMessage">
                <set field="shipment" from="org.moqui.impl.context.ContextJavaUtil.jacksonMapper.readValue(systemMessage.messageText, Map.class)"/>
                <set field="shopifyFulfillmentAckMap" from="[shipmentId:shipment.shipmentId, primaryOrderId:shipment.orderId, externalId: systemMessage.remoteMessageId]"/>
                <script>
                    new ObjectMapper()
                    .setDateFormat(new java.text.SimpleDateFormat(System.getProperty('default_date_time_format')))
                    .writerWithDefaultPrettyPrinter().writeValue(jGenerator, shopifyFulfillmentAckMap)
                </script>
            </iterate>
            <script>
                        jGenerator.writeEndArray()
                    }
                } catch (IOException e) {
                    logger.error("Error preparing Shopify Fulfillment Ack Feed file", e)
                }
            </script>

            <service-call name="org.moqui.impl.SystemMessageServices.queue#SystemMessage"
                    in-map="[systemMessageTypeId:'SendShopifyFulfillmentAck',
                    systemMessageRemoteId:systemMessageRemoteId, messageText:jsonFilePathRef, remoteMessageId: jsonFilePathRef.substring(jsonFilePathRef.lastIndexOf('/')+1), sendNow:true]"
                    out-map="shopifyFulfillmentAckOut"/>

            <if condition="jobName &amp;&amp; !skipLastRunTimeUpdate">
                <!-- Set the current timestamp as the last run time for next run -->
                <service-call name="update#moqui.service.job.ServiceJobParameter"
                        in-map="[jobName:lastRunParam.jobName, parameterName:lastRunParam.parameterName,
                        parameterValue:nowDate]"/>
            </if>
            <return message="Created the Shopify Fulfillment Ack Feed file at time ${nowDate} with type SendShopifyFulfillmentAck and
                remote ${systemMessageRemoteId}, saved response in messages ${shopifyFulfillmentAckOut.systemMessageId}"/>
        </actions>
    </service>

    <service verb="get" noun="FulfillmentOrderDetails">
        <description>Get fulfillment details for the given fulfillmentOrderId</description>
        <in-parameters>
            <parameter name="systemMessageRemoteId" required="true"/>
            <parameter name="fulfillmentOrderId" required="true"/>
            <parameter name="includeFulfillmentLineItems" type="Boolean" default-value="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="fulfillmentOrderDetail"/>
        </out-parameters>
        <actions>
            <set field="fulfillmentOrderDetail" from="[:]"/>
            <script>
                queryText = ec.resourceFacade.template("dbresource://shopify/template/graphQL/FulfillmentOrderHeaderByIdQuery.ftl", "")
            </script>
            <service-call name="co.hotwax.shopify.common.ShopifyHelperServices.send#ShopifyGraphqlRequest" in-map="[systemMessageRemoteId:systemMessageRemoteId, queryText:queryText]" out-map="fulfillmentResponse"/>
            <if condition="!fulfillmentResponse.response.node">
                <return type="warning" message="No Shopify fulfillment order found for id: ${fulfillmentOrderId}"/>
            </if>
            <set field="fulfillmentOrderDetail" from="fulfillmentResponse.response.node"/>
<!--            Getting Fulfillment LineItems details-->
            <if condition="includeFulfillmentLineItems">
                <set field="hasNextPage" type="Boolean" value="true"/>
                <set field="fulfillmentLineItems" from="[]"/>
                <while condition="hasNextPage">
                    <script>
                        queryText = ec.resourceFacade.template("dbresource://shopify/template/graphQL/FulfillmentOrderLineItemsByIdQuery.ftl", "")
                    </script>
                    <service-call name="co.hotwax.shopify.common.ShopifyHelperServices.send#ShopifyGraphqlRequest" in-map="[systemMessageRemoteId:systemMessageRemoteId, queryText:queryText]" out-map="fulfillmentLineItemResponse"/>
                    <if condition="fulfillmentLineItemResponse.response.node.lineItems.edges">
                        <script>fulfillmentLineItems.addAll(fulfillmentLineItemResponse.response.node.lineItems.edges.node)</script>
                    </if>
                    <set field="hasNextPage" from="fulfillmentLineItemResponse.response.node.lineItems.pageInfo.hasNextPage"/>
                    <set field="cursor" from="fulfillmentLineItemResponse.response.node.lineItems.pageInfo.endCursor"/>
                </while>
                <set field="fulfillmentOrderDetail.lineItems" from="fulfillmentLineItems"/>
            </if>
        </actions>
    </service>
    <service verb="get" noun="FulfillmentOrdersByOrderId">
        <description>Get all fulfillment order details for a given shopify order Id</description>
        <in-parameters>
            <parameter name="systemMessageRemoteId" required="true"/>
            <parameter name="shopifyOrderId" required="true"/>
            <parameter name="includeFulfillmentLineItems" type="Boolean" default-value="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="fulfillmentOrdersByOrderId"/>
        </out-parameters>
        <actions>
            <set field="fulfillmentOrdersByOrderId" from="[:]"/>
            <set field="hasNextPage" type="Boolean" value="true"/>
            <set field="fulfillmentOrders" from="[]"/>
            <while condition="hasNextPage">
                <script>
                    queryText = ec.resourceFacade.template("dbresource://shopify/template/graphQL/FulfillmentOrdersByOrderIdQuery.ftl", "")
                </script>
                <service-call name="co.hotwax.shopify.common.ShopifyHelperServices.send#ShopifyGraphqlRequest" in-map="[systemMessageRemoteId:systemMessageRemoteId, queryText:queryText]" out-map="fulfillmentOrderResponse"/>
                <if condition="!fulfillmentOrderResponse.response.node">
                    <return type="warning" message="No shopify order found for id: ${shopifyOrderId}"/>
                </if>
                <!-- Getting all the fulfillmentOrderId for the shopifyOrderId-->
                <set field="fulfillmentOrderIdList" from="[]"/>
                <if condition="fulfillmentOrderResponse.response.node.fulfillmentOrders.edges">
                    <script>fulfillmentOrderIdList.addAll(fulfillmentOrderResponse.response.node.fulfillmentOrders.edges.node.id)</script>
                </if>
                <!-- Getting fulfillment order details for each fulfillmentOrderId-->
                <iterate list="fulfillmentOrderIdList" entry="fulfillmentOrderId">
                    <service-call name="co.hotwax.shopify.fulfillment.ShopifyFulfillmentServices.get#FulfillmentOrderDetails" in-map="[systemMessageRemoteId:systemMessageRemoteId, fulfillmentOrderId:fulfillmentOrderId, includeFulfillmentLineItems:includeFulfillmentLineItems]" out-map="fulfillmentOrderDetail"/>
                    <script>fulfillmentOrders.addAll(fulfillmentOrderDetail.fulfillmentOrderDetail)</script>
                </iterate>
                <set field="hasNextPage" from="fulfillmentOrderResponse.response.node.fulfillmentOrders.pageInfo.hasNextPage"/>
                <set field="cursor" from="fulfillmentOrderResponse.response.node.fulfillmentOrders.pageInfo.endCursor"/>
            </while>
            <set field="fulfillmentOrdersByOrderId.id" from="fulfillmentOrderResponse.response.node.id"/>
            <set field="fulfillmentOrdersByOrderId.name" from="fulfillmentOrderResponse.response.node.name"/>
            <set field="fulfillmentOrdersByOrderId.fulfillmentOrders" from="fulfillmentOrders"/>
        </actions>
    </service>
</services>