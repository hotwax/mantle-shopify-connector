<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://moqui.org/xsd/service-definition-3.xsd">
    <service verb="purge" noun="OldSystemMessages" authenticate="anonymous-all">
        <description>
            Purge all old system message and related entities. Not adding any status condition as ideally
            any produced or received messages should have been moved SmsgError status if not sent or consumed
            after max retries.
        </description>
        <in-parameters>
            <parameter name="purgeDays" type="Integer" default-value="30"/>
            <parameter name="systemMessageTypeId"/>
            <parameter name="parentSystemMessageTypeId"/>
        </in-parameters>
        <actions>
            <set field="purgeDate" from="java.sql.Timestamp.from(java.time.ZonedDateTime.now().minusDays(purgeDays.intValue()).toInstant())"/>
            <entity-find entity-name="moqui.service.message.SystemMessageAndType" list="systemMessages">
                <econdition field-name="initDate" operator="less" from="purgeDate"/>
                <econdition field-name="systemMessageTypeId" operator="equals" from="systemMessageTypeId" ignore-if-empty="true"/>
                <econdition field-name="parentTypeId" operator="equals" from="parentSystemMessageTypeId" ignore-if-empty="true"/>
                <order-by field-name="initDate"/>
                <use-iterator/>
            </entity-find>
            <iterate list="systemMessages" entry="systemMessage">
                <service-call name="co.hotwax.impl.SystemMessageServices.delete#SystemMessage" in-map="[systemMessageId:systemMessage.systemMessageId]" transaction="force-new" ignore-error="true"/>
            </iterate>
        </actions>
    </service>
    <service verb="delete" noun="SystemMessage" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="systemMessageId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="moqui.service.message.SystemMessage" value-field="systemMessage"/>
            <entity-delete-related value-field="systemMessage" relationship-name="errors"/>
            <entity-find-related-one value-field="systemMessage" relationship-name="type" to-value-field="systemMessageType"/>
            <if condition="'LocalFeedFile'.equals(systemMessageType.parentTypeId)">
                <script>try {</script>
                <set field="isDeleted" from="java.nio.file.Files.deleteIfExists(java.nio.file.Paths.get(ec.resource.getLocationReference(systemMessage.messageText).getUri().getPath()))"/>
                <script>} catch (Exception e) { ec.logger.error(e.getMessage()) }</script>
            </if>
            <entity-delete value-field="systemMessage"/>
        </actions>
    </service>
</services>